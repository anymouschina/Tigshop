// ========================================
// PHASE 3: Multi-vendor System
// ========================================

// Merchant (商户表)
model Merchant {
  merchantId            Int      @id @default(autoincrement()) @map("merchant_id")
  merchantName          String   @map("merchant_name") @default("")
  merchantCode          String   @map("merchant_code") @default("")
  contactName           String   @map("contact_name") @default("")
  contactPhone          String   @map("contact_phone") @default("")
  contactEmail          String   @map("contact_email") @default("")
  businessLicense       String?  @map("business_license")
  idCardFront           String?  @map("id_card_front")
  idCardBack            String?  @map("id_card_back")
  address               String   @map("address") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchantAccounts      MerchantAccount[]
  merchantApplies       MerchantApply[]
  merchantUsers         MerchantUser[]
  shops                 Shop[]
}

// MerchantAccount (商户账户表)
model MerchantAccount {
  accountId             Int      @id @default(autoincrement()) @map("account_id")
  merchantId            Int      @map("merchant_id")
  balance               Decimal  @map("balance") @db.Decimal(10, 2) @default(0.00)
  frozenBalance         Decimal  @map("frozen_balance") @db.Decimal(10, 2) @default(0.00)
  totalIncome           Decimal  @map("total_income") @db.Decimal(10, 2) @default(0.00)
  totalExpenditure      Decimal  @map("total_expenditure") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// MerchantApply (商户申请表)
model MerchantApply {
  applyId               Int      @id @default(autoincrement()) @map("apply_id")
  merchantId            Int      @map("merchant_id")
  applyType             Int      @map("apply_type") @default(0)
  applyData            String?  @map("apply_data") // JSON
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// MerchantUser (商户用户表)
model MerchantUser {
  userId                Int      @id @default(autoincrement()) @map("user_id")
  merchantId            Int      @map("merchant_id")
  username              String   @map("username") @default("")
  password              String   @map("password") @default("")
  mobile                String   @map("mobile") @default("")
  email                 String   @map("email") @default("")
  status                Int      @map("status") @default(1)
  roleId                Int      @map("role_id") @default(0)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// VendorAccount (供应商账户表)
model VendorAccount {
  accountId             Int      @id @default(autoincrement()) @map("account_id")
  vendorId              Int      @map("vendor_id")
  balance               Decimal  @map("balance") @db.Decimal(10, 2) @default(0.00)
  frozenBalance         Decimal  @map("frozen_balance") @db.Decimal(10, 2) @default(0.00)
  totalIncome           Decimal  @map("total_income") @db.Decimal(10, 2) @default(0.00)
  totalExpenditure      Decimal  @map("total_expenditure") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  vendorAccountLogs     VendorAccountLog[]
}

// VendorAccountLog (供应商账户日志表)
model VendorAccountLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorId              Int      @map("vendor_id")
  accountId             Int      @map("account_id")
  amount                Decimal  @map("amount") @db.Decimal(10, 2) @default(0.00)
  beforeBalance         Decimal  @map("before_balance") @db.Decimal(10, 2) @default(0.00)
  afterBalance          Decimal  @map("after_balance") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())
  relatedId             Int      @map("related_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor          @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  vendorAccount         VendorAccount    @relation(fields: [accountId], references: [accountId])
}

// VendorProduct (供应商商品表)
model VendorProduct {
  vendorProductId       Int      @id @default(autoincrement()) @map("vendor_product_id")
  vendorId              Int      @map("vendor_id")
  productId             Int      @map("product_id")
  vendorProductIdRef     Int      @map("vendor_product_id_ref") @default(0)
  productName           String   @map("product_name") @default("")
  productSn             String   @map("product_sn") @default("")
  productPrice          Decimal  @map("product_price") @db.Decimal(10, 2) @default(0.00)
  productStock          Int      @map("product_stock") @default(0)
  status                Int      @map("status") @default(0)
  checkStatus           Int      @map("check_status") @default(0)
  checkReason           String   @map("check_reason") @default("")
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor    @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  product               Product   @relation(fields: [productId], references: [productId])
  vendorProductSkus      VendorProductSku[]
  vendorProductGalleries VendorProductGallery[]
  vendorProductVideos    VendorProductVideo[]
  vendorProductAuditLogs VendorProductAuditLog[]
}

// VendorProductAuditLog (供应商商品审核日志表)
model VendorProductAuditLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorProductId       Int      @map("vendor_product_id")
  adminId               Int      @map("admin_id") @default(0)
  action                String   @map("action") @default("")
  actionDesc            String   @map("action_desc") @default("")
  beforeStatus          Int      @map("before_status") @default(0)
  afterStatus           Int      @map("after_status") @default(0)
  remark                String   @map("remark") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  adminUser             AdminUser?    @relation(fields: [adminId], references: [adminId])
}

// VendorProductGallery (供应商商品图片表)
model VendorProductGallery {
  galleryId             Int      @id @default(autoincrement()) @map("gallery_id")
  vendorProductId       Int      @map("vendor_product_id")
  picUrl                String   @map("pic_url") @default("")
  picDesc               String   @map("pic_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
}

// VendorProductSku (供应商商品SKU表)
model VendorProductSku {
  skuId                 Int      @id @default(autoincrement()) @map("sku_id")
  vendorProductId       Int      @map("vendor_product_id")
  skuValue              String   @map("sku_value") @default("")
  skuSn                 String   @map("sku_sn") @default("")
  skuStock              Int      @map("sku_stock") @default(0)
  skuPrice              Decimal  @map("sku_price") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  vendorProductSkuAttrs VendorProductSkuAttr[]
  vendorProductSkuStockLogs VendorProductSkuStockLog[]
}

// VendorProductSkuAttr (供应商SKU属性表)
model VendorProductSkuAttr {
  attrId                Int      @id @default(autoincrement()) @map("attr_id")
  skuId                 Int      @map("sku_id")
  attrName              String   @map("attr_name") @default("")
  attrValue             String   @map("attr_value") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProductSku       VendorProductSku @relation(fields: [skuId], references: [skuId], onDelete: Cascade)
}

// VendorProductSkuStockLog (供应商SKU库存日志表)
model VendorProductSkuStockLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorProductId       Int      @map("vendor_product_id")
  skuId                 Int      @map("sku_id")
  stockChange           Int      @map("stock_change") @default(0)
  beforeStock           Int      @map("before_stock") @default(0)
  afterStock            Int      @map("after_stock") @default(0)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  vendorProductSku      VendorProductSku @relation(fields: [skuId], references: [skuId], onDelete: Cascade)
}

// VendorProductVideo (供应商商品视频表)
model VendorProductVideo {
  videoId               Int      @id @default(autoincrement()) @map("video_id")
  vendorProductId       Int      @map("vendor_product_id")
  videoUrl              String   @map("video_url") @default("")
  videoCover            String   @map("video_cover") @default("")
  videoTitle            String   @map("video_title") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
}

// VendorSettlementOrder (供应商结算订单表)
model VendorSettlementOrder {
  settlementId          Int      @id @default(autoincrement()) @map("settlement_id")
  vendorId              Int      @map("vendor_id")
  orderId               Int      @map("order_id")
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  settlementAmount     Decimal  @map("settlement_amount") @db.Decimal(10, 2) @default(0.00)
  status                Int      @map("status") @default(0)
  settlementTime       DateTime? @map("settlement_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  order                 Order  @relation(fields: [orderId], references: [orderId])
}

// VendorShopBind (供应商店铺绑定表)
model VendorShopBind {
  bindId                Int      @id @default(autoincrement()) @map("bind_id")
  vendorId              Int      @map("vendor_id")
  shopId                Int      @map("shop_id")
  bindTime              DateTime @map("bind_time") @default(now())
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  shop                  Shop   @relation(fields: [shopId], references: [shopId])
}

// VendorWithdraw (供应商提现表)
model VendorWithdraw {
  withdrawId            Int      @id @default(autoincrement()) @map("withdraw_id")
  vendorId              Int      @map("vendor_id")
  withdrawAmount        Decimal  @map("withdraw_amount") @db.Decimal(10, 2) @default(0.00)
  fee                   Decimal  @map("fee") @db.Decimal(10, 2) @default(0.00)
  actualAmount          Decimal  @map("actual_amount") @db.Decimal(10, 2) @default(0.00)
  bankName              String   @map("bank_name") @default("")
  bankAccount           String   @map("bank_account") @default("")
  accountName           String   @map("account_name") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
}

// Salesman (销售员表)
model Salesman {
  salesmanId            Int      @id @default(autoincrement()) @map("salesman_id")
  userId                Int      @map("user_id")
  salesmanName          String   @map("salesman_name") @default("")
  mobile                String   @map("mobile") @default("")
  email                 String   @map("email") @default("")
  avatar                String   @map("avatar") @default("")
  status                Int      @map("status") @default(1)
  parentId              Int      @map("parent_id") @default(0)
  level                 Int      @map("level") @default(1)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  totalCommission       Decimal  @map("total_commission") @db.Decimal(10, 2) @default(0.00)
  availableCommission   Decimal  @map("available_commission") @db.Decimal(10, 2) @default(0.00)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parentSalesman        Salesman?      @relation("SalesmanHierarchy", fields: [parentId], references: [salesmanId])
  childSalesmen         Salesman[]     @relation("SalesmanHierarchy")
  salesmanCustomers     SalesmanCustomer[]
  salesmanOrders        SalesmanOrder[]
}

// SalesmanConfig (销售员配置表)
model SalesmanConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// SalesmanContent (销售员内容表)
model SalesmanContent {
  contentId             Int      @id @default(autoincrement()) @map("content_id")
  salesmanId            Int      @map("salesman_id")
  contentType           Int      @map("content_type") @default(0)
  title                 String   @map("title") @default("")
  content               String   @map("content") @default("")
  image                 String?  @map("image")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// SalesmanCustomer (销售员客户表)
model SalesmanCustomer {
  customerId            Int      @id @default(autoincrement()) @map("customer_id")
  salesmanId            Int      @map("salesman_id")
  userId                Int      @map("user_id")
  bindTime              DateTime @map("bind_time") @default(now())
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// SalesmanGroup (销售员分组表)
model SalesmanGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  groupName             String   @map("group_name") @default("")
  groupDesc             String   @map("group_desc") @default("")
  salesmanId            Int      @map("salesman_id")
  status                Int      @map("status") @default(1)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// SalesmanMaterial (销售员素材表)
model SalesmanMaterial {
  materialId            Int      @id @default(autoincrement()) @map("material_id")
  salesmanId            Int      @map("salesman_id")
  categoryId            Int      @map("category_id") @default(0)
  materialName          String   @map("material_name") @default("")
  materialType          Int      @map("material_type") @default(0)
  materialUrl           String   @map("material_url") @default("")
  materialCover         String   @map("material_cover") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman            @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  category              SalesmanMaterialCategory? @relation(fields: [categoryId], references: [categoryId])
}

// SalesmanMaterialCategory (销售员素材分类表)
model SalesmanMaterialCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  categoryName          String   @map("category_name") @default("")
  categoryDesc          String   @map("category_desc") @default("")
  salesmanId            Int      @map("salesman_id")
  sortOrder             Int      @map("sort_order") @default(100)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman         @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  salesmanMaterials     SalesmanMaterial[]
}

// SalesmanOrder (销售员订单表)
model SalesmanOrder {
  orderId               Int      @id @default(autoincrement()) @map("order_id")
  salesmanId            Int      @map("salesman_id")
  userId                Int      @map("user_id")
  orderSn               String   @map("order_sn") @default("")
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  status                Int      @map("status") @default(0)
  orderTime             DateTime @map("order_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// SalesmanProduct (销售员商品表)
model SalesmanProduct {
  productId             Int      @id @default(autoincrement()) @map("product_id")
  salesmanId            Int      @map("salesman_id")
  productIdRef          Int      @map("product_id_ref")
  status                Int      @map("status") @default(1)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// ShopAccountLog (店铺账户日志表)
model ShopAccountLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  shopId                Int      @map("shop_id")
  amount                Decimal  @map("amount") @db.Decimal(10, 2) @default(0.00)
  beforeBalance         Decimal  @map("before_balance") @db.Decimal(10, 2) @default(0.00)
  afterBalance          Decimal  @map("after_balance") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())
  relatedId             Int      @map("related_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
}

// ShopProductCategory (店铺商品分类表)
model ShopProductCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  shopId                Int      @map("shop_id")
  categoryName          String   @map("category_name") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop                  @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  parentCategory        ShopProductCategory?  @relation("ShopCategoryHierarchy", fields: [parentId], references: [categoryId])
  childCategories       ShopProductCategory[] @relation("ShopCategoryHierarchy")
}

// ShopWithdraw (店铺提现表)
model ShopWithdraw {
  withdrawId            Int      @id @default(autoincrement()) @map("withdraw_id")
  shopId                Int      @map("shop_id")
  withdrawAmount        Decimal  @map("withdraw_amount") @db.Decimal(10, 2) @default(0.00)
  fee                   Decimal  @map("fee") @db.Decimal(10, 2) @default(0.00)
  actualAmount          Decimal  @map("actual_amount") @db.Decimal(10, 2) @default(0.00)
  bankName              String   @map("bank_name") @default("")
  bankAccount           String   @map("bank_account") @default("")
  accountName           String   @map("account_name") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
}