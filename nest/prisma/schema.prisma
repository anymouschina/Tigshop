generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminRole {
  roleId        Int      @id @default(autoincrement())
  roleName      String
  roleDesc      String?
  authorityList Json
  adminType     String   @default("admin")
  isEnable      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model AdminUser {
  adminId       Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  email         String?
  mobile        String?
  avatar        String?
  adminType     String    @default("admin")
  isEnable      Boolean   @default(true)
  lastLoginTime DateTime?
  lastLoginIp   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
}

model Appointment {
  id             Int       @id @default(autoincrement())
  serviceType    String
  name           String
  phone          String
  region         String
  address        String?
  sceneType      String[]
  location       String
  createdAt      DateTime  @default(now())
  userId         Int
  cancelReason   String?
  cancelledAt    DateTime?
  cityCode       String?
  completedAt    DateTime?
  districtCode   String?
  followUpCount  Int       @default(0)
  lastFollowUpAt DateTime?
  latitude       Float?
  longitude      Float?
  updatedAt      DateTime
  description    String?
  imageUrls      String[]
  User           User      @relation(fields: [userId], references: [userId])
  Order          Order[]
}

model BlacklistedToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  userId        Int
  blacklistedAt DateTime @default(now())
  expiresAt     DateTime
}

model Brand {
  brandId     Int       @id @default(autoincrement())
  brandName   String
  brandLogo   String?
  brandImage  String?
  keywords    String?
  description String?
  sort        Int       @default(0)
  isShow      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Product     Product[]
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  userId    Int        @unique
  User      User       @relation(fields: [userId], references: [userId])
  CartItem  CartItem[]
}

model CartItem {
  cartItemId Int      @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime @default(now())
  cartId     Int
  productId  Int
  Cart       Cart     @relation(fields: [cartId], references: [cartId])
  Product    Product  @relation(fields: [productId], references: [productId])
}

model Category {
  categoryId     Int        @id @default(autoincrement())
  parentId       Int?
  categoryName   String
  categoryImage  String?
  keywords       String?
  description    String?
  sort           Int        @default(0)
  isShow         Boolean    @default(true)
  isNav          Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [categoryId])
  other_Category Category[] @relation("CategoryToCategory")
  Product        Product[]
}

model Coupon {
  couponId       Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  couponCode     String       @unique
  couponName     String
  couponType     Int          @default(1)
  discountAmount Decimal?
  discountRate   Decimal?
  endTime        DateTime
  isEnable       Boolean      @default(true)
  minAmount      Decimal?
  startTime      DateTime
  totalNum       Int
  updatedAt      DateTime
  usedNum        Int          @default(0)
  UserCoupon     UserCoupon[]
}

model CouponCode {
  couponId        Int               @id @default(autoincrement())
  code            String            @unique
  discount        Decimal?
  expireAt        DateTime
  createdAt       DateTime          @default(now())
  CoupunOrderUser CoupunOrderUser[]
}

model CoupunOrderUser {
  userId     Int
  orderId    Int
  couponId   Int
  CouponCode CouponCode @relation(fields: [couponId], references: [couponId])
  Order      Order      @relation(fields: [orderId], references: [orderId])
  User       User       @relation(fields: [userId], references: [userId])

  @@id([userId, orderId, couponId])
}

model File {
  fileId       Int      @id @default(autoincrement())
  fileName     String
  originalName String
  filePath     String
  fileUrl      String
  fileSize     Int
  mimeType     String
  type         String
  relatedId    Int?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model Notification {
  notificationId Int       @id @default(autoincrement())
  userId         Int
  type           String
  template       String
  title          String
  content        String
  status         String    @default("pending")
  priority       String    @default("normal")
  relatedData    Json?
  scheduledAt    DateTime?
  sentAt         DateTime?
  failedAt       DateTime?
  result         Json?
  error          String?
  isRead         Boolean   @default(false)
  readAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  User           User      @relation(fields: [userId], references: [userId])
}

model Order {
  orderId         Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  userId          Int
  appointmentId   Int?
  appointmentInfo Json?
  paymentStatus   PaymentStatus     @default(UNPAID)
  cancelReason    String?
  cancelTime      DateTime?
  completeTime    DateTime?
  discountAmount  Decimal?
  orderSn         String            @unique
  paymentAmount   Decimal?
  paymentMethod   String?
  paymentTime     DateTime?
  receiveTime     DateTime?
  remark          String?
  shippingFee     Decimal?
  shippingStatus  ShippingStatus    @default(UNSHIPPED)
  shippingTime    DateTime?
  totalAmount     Decimal?
  updatedAt       DateTime
  status          OrderStatus       @default(PENDING)
  CoupunOrderUser CoupunOrderUser[]
  Appointment     Appointment?      @relation(fields: [appointmentId], references: [id])
  User            User              @relation(fields: [userId], references: [userId])
  OrderAddress    OrderAddress[]
  OrderItem       OrderItem[]
  Payment         Payment[]
  Refund          Refund[]
}

model OrderAddress {
  addressId Int      @id @default(autoincrement())
  orderId   Int
  name      String
  mobile    String
  province  String
  city      String
  district  String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  Order     Order    @relation(fields: [orderId], references: [orderId])
}

model OrderItem {
  orderItemId   Int      @id @default(autoincrement())
  quantity      Int
  createdAt     DateTime @default(now())
  orderId       Int
  productId     Int
  discountPrice Decimal?
  price         Decimal?
  productImage  String?
  productName   String
  productSpecId Int?
  remark        String?
  shippingFee   Decimal?
  specValue     String?
  totalPrice    Decimal?
  Order         Order    @relation(fields: [orderId], references: [orderId])
  Product       Product  @relation(fields: [productId], references: [productId])
}

model Product {
  productId      Int           @id @default(autoincrement())
  name           String
  price          Decimal?
  description    String?
  stock          Int           @default(0)
  createdAt      DateTime      @default(now())
  brandId        Int?
  categoryId     Int
  costPrice      Decimal?
  deletedAt      DateTime?
  image          String?
  images         String[]
  isBest         Boolean       @default(false)
  isDeleted      Boolean       @default(false)
  isEnable       Boolean       @default(true)
  isHot          Boolean       @default(false)
  isNew          Boolean       @default(false)
  isRecommend    Boolean       @default(false)
  keywords       String?
  marketPrice    Decimal?
  maxBuy         Int?
  minBuy         Int           @default(1)
  sales          Int           @default(0)
  seoDescription String?
  seoKeywords    String?
  seoTitle       String?
  shippingFee    Decimal?
  shopId         Int           @default(1)
  sort           Int           @default(100)
  specType       Int           @default(0)
  subtitle       String?
  supplierId     Int?
  updatedAt      DateTime
  video          String?
  videoCover     String?
  volume         Decimal?
  weight         Decimal?
  CartItem       CartItem[]
  OrderItem      OrderItem[]
  Brand          Brand?        @relation(fields: [brandId], references: [brandId])
  Category       Category      @relation(fields: [categoryId], references: [categoryId])
  Shop           Shop          @relation(fields: [shopId], references: [shopId])
  Supplier       Supplier?     @relation(fields: [supplierId], references: [supplierId])
  ProductAttr    ProductAttr[]
  ProductSpec    ProductSpec[]
}

model ProductAttr {
  attrId    Int      @id @default(autoincrement())
  productId Int
  attrName  String
  attrValue String
  sort      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [productId])
}

model ProductSpec {
  specId    Int      @id @default(autoincrement())
  productId Int
  specName  String
  specValue String
  specPrice Decimal?
  specStock Int      @default(0)
  specSku   String?
  specImage String?
  sort      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [productId])
}

model ProductSpecTemplate {
  templateId   Int            @id @default(autoincrement())
  name         String
  description  String?
  shopId       Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  templateSpecs ProductSpecTemplateSpec[]
}

model ProductSpecTemplateSpec {
  id           Int            @id @default(autoincrement())
  templateId   Int
  specName     String
  specValues   String[]       // JSON array of possible values
  sort         Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  template     ProductSpecTemplate @relation(fields: [templateId], references: [templateId])
}

model ReferralCode {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  isActive     Boolean        @default(true)
  UserReferral UserReferral[]
}

model Shop {
  shopId      Int       @id @default(autoincrement())
  shopName    String
  shopLogo    String?
  shopImage   String?
  keywords    String?
  description String?
  mobile      String?
  email       String?
  address     String?
  sort        Int       @default(0)
  isEnable    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Product     Product[]
}

model Supplier {
  supplierId   Int       @id @default(autoincrement())
  supplierName String
  contact      String?
  mobile       String?
  email        String?
  address      String?
  description  String?
  sort         Int       @default(0)
  isEnable     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  Product      Product[]
}

model User {
  userId                                         Int               @id @default(autoincrement())
  name                                           String?
  email                                          String?           @unique
  password                                       String?
  address                                        String?
  createdAt                                      DateTime          @default(now())
  openId                                         String?           @unique
  unionId                                        String?           @unique
  avatarUrl                                      String?
  gender                                         Int?
  country                                        String?
  province                                       String?
  city                                           String?
  language                                       String?
  ref                                            String?
  balance                                        Decimal?
  birthday                                       DateTime?
  isDeleted                                      Boolean           @default(false)
  isEnable                                       Boolean           @default(true)
  lastLoginIp                                    String?
  lastLoginTime                                  DateTime?
  mobile                                         String?           @unique
  nickname                                       String?
  points                                         Int               @default(0)
  registerTime                                   DateTime          @default(now())
  totalAmount                                    Decimal?
  userRankId                                     Int?
  Appointment                                    Appointment[]
  Cart                                           Cart?
  CoupunOrderUser                                CoupunOrderUser[]
  Notification                                   Notification[]
  Order                                          Order[]
  UserRank                                       UserRank?         @relation(fields: [userRankId], references: [userRankId])
  UserCoupon                                     UserCoupon[]
  UserReferral_UserReferral_referrerOpenIdToUser UserReferral[]    @relation("UserReferral_referrerOpenIdToUser")
  UserReferral_UserReferral_userIdToUser         UserReferral?     @relation("UserReferral_userIdToUser")
  Payment                                        Payment[]
  Refund                                         Refund[]
  UserAddress                                    UserAddress[]
  UserCollection                                 UserCollection[]
  PointsLog                                      PointsLog[]
  PointsExchange                                 PointsExchange[]
}

model UserCoupon {
  userCouponId Int       @id @default(autoincrement())
  userId       Int
  couponId     Int
  orderId      Int?
  status       Int       @default(0)
  usedTime     DateTime?
  createdAt    DateTime  @default(now())
  Coupon       Coupon    @relation(fields: [couponId], references: [couponId])
  User         User      @relation(fields: [userId], references: [userId])
}

model UserRank {
  userRankId  Int      @id @default(autoincrement())
  rankName    String
  minPoints   Int
  maxPoints   Int?
  discount    Decimal?
  description String?
  icon        String?
  sort        Int      @default(0)
  isEnable    Boolean  @default(true)
  User        User[]
}

model UserReferral {
  id                                     Int           @id @default(autoincrement())
  userId                                 Int           @unique
  refCode                                String
  referrerOpenId                         String?
  createdAt                              DateTime      @default(now())
  referralCodeId                         Int?
  metadata                               Json?
  source                                 String?
  ReferralCode                           ReferralCode? @relation(fields: [referralCodeId], references: [id])
  User_UserReferral_referrerOpenIdToUser User?         @relation("UserReferral_referrerOpenIdToUser", fields: [referrerOpenId], references: [openId])
  User_UserReferral_userIdToUser         User          @relation("UserReferral_userIdToUser", fields: [userId], references: [userId])
}

enum AppointmentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDING
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
  REFUNDED
  CLOSED
}

enum ShippingStatus {
  UNSHIPPED
  SHIPPED
  DELIVERED
  RETURNED
}

enum Status {
  PENDING
  DELIVERED
  ACCEPTED
  PROCESSING
  COMPLETED
  CANCELLED
}

model Payment {
  paymentId       Int            @id @default(autoincrement())
  paymentSn       String         @unique
  orderId         Int
  userId          Int
  amount          Decimal        @db.Decimal(10, 2)
  paymentMethod   String         // WECHAT, ALIPAY, UNIONPAY
  transactionId   String?
  status          PaymentStatus   @default(PENDING)
  paidTime        DateTime?
  expireTime      DateTime?
  callbackTime    DateTime?
  callbackData    Json?
  refundAmount    Decimal        @db.Decimal(10, 2) @default(0)
  refundStatus   RefundStatus   @default(NONE)
  refundTime     DateTime?
  refundReason   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  Order           Order           @relation(fields: [orderId], references: [orderId])
  User            User            @relation(fields: [userId], references: [userId])
  Refund          Refund[]

  @@index([orderId])
  @@index([userId])
  @@index([paymentSn])
  @@index([status])
}

model Refund {
  refundId        Int            @id @default(autoincrement())
  refundSn        String         @unique
  paymentId       Int
  orderId         Int
  userId          Int
  amount          Decimal        @db.Decimal(10, 2)
  reason          String?
  status          RefundStatus   @default(PENDING)
  refundMethod    String?        // ORIGINAL, BALANCE, BANK
  transactionId   String?
  completedTime   DateTime?
  adminRemark     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  Payment         Payment         @relation(fields: [paymentId], references: [paymentId])
  Order           Order           @relation(fields: [orderId], references: [orderId])
  User            User            @relation(fields: [userId], references: [userId])

  @@index([paymentId])
  @@index([orderId])
  @@index([userId])
  @@index([status])
}

enum RefundStatus {
  NONE
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  name       String
  mobile     String
  province   String
  city       String
  district   String
  address    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserCollection {
  id         Int             @id @default(autoincrement())
  userId     Int
  type       CollectionType
  targetId   Int
  createdAt  DateTime        @default(now())
  User       User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, type, targetId])
}

model PointsLog {
  id          Int             @id @default(autoincrement())
  userId      Int
  type        PointsType
  points      Int
  balance     Int
  sourceType  PointsSourceType
  description String
  relatedId   Int?
  createdAt   DateTime        @default(now())
  User        User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model PointsExchange {
  id           Int      @id @default(autoincrement())
  userId       Int
  points       Int
  exchangeType String
  description  String
  createdAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum CollectionType {
  PRODUCT
  SHOP
}

enum PointsType {
  EARN
  SPEND
}

enum PointsSourceType {
  SIGN_IN
  EXCHANGE
  PURCHASE
  REFUND
  ADMIN
  OTHER
}