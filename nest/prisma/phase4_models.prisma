// ========================================
// PHASE 4: Content & Analytics
// ========================================

// ArticleCategory (文章分类表)
model ArticleCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  categoryName          String   @map("category_name") @default("")
  categoryDesc          String   @map("category_desc") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  parentCategory        ArticleCategory?  @relation("ArticleCategoryHierarchy", fields: [parentId], references: [categoryId])
  childCategories       ArticleCategory[] @relation("ArticleCategoryHierarchy")
  articles              Article[]
}

// Gallery (相册表)
model Gallery {
  galleryId             Int      @id @default(autoincrement()) @map("gallery_id")
  galleryName           String   @map("gallery_name") @default("")
  galleryDesc           String   @map("gallery_desc") @default("")
  galleryType           Int      @map("gallery_type") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  galleryPics           GalleryPic[]
  galleryVideos         GalleryVideo[]
}

// GalleryPic (相册图片表)
model GalleryPic {
  picId                 Int      @id @default(autoincrement()) @map("pic_id")
  galleryId             Int      @map("gallery_id")
  picUrl                String   @map("pic_url") @default("")
  picTitle              String   @map("pic_title") @default("")
  picDesc               String   @map("pic_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  gallery               Gallery @relation(fields: [galleryId], references: [galleryId], onDelete: Cascade)
}

// GalleryVideo (相册视频表)
model GalleryVideo {
  videoId               Int      @id @default(autoincrement()) @map("video_id")
  galleryId             Int      @map("gallery_id")
  videoUrl              String   @map("video_url") @default("")
  videoTitle            String   @map("video_title") @default("")
  videoDesc             String   @map("video_desc") @default("")
  videoCover            String   @map("video_cover") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  gallery               Gallery         @relation(fields: [galleryId], references: [galleryId], onDelete: Cascade)
  galleryVideoInfo      GalleryVideoInfo[]
}

// GalleryVideoInfo (视频信息表)
model GalleryVideoInfo {
  infoId                Int      @id @default(autoincrement()) @map("info_id")
  videoId               Int      @map("video_id")
  duration              Int      @map("duration") @default(0)
  size                  Int      @map("size") @default(0)
  format                String   @map("format") @default("")
  resolution            String   @map("resolution") @default("")
  bitrate               Int      @map("bitrate") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  galleryVideo          GalleryVideo @relation(fields: [videoId], references: [videoId], onDelete: Cascade)
}

// Feedback (用户反馈表)
model Feedback {
  feedbackId            Int      @id @default(autoincrement()) @map("feedback_id")
  userId                Int      @map("user_id")
  feedbackType          Int      @map("feedback_type") @default(0)
  title                 String   @map("title") @default("")
  content               String   @map("content") @default("")
  contact               String   @map("contact") @default("")
  images                String?  @map("images") // JSON
  status                Int      @map("status") @default(0)
  replyContent          String   @map("reply_content") @default("")
  replyTime             DateTime? @map("reply_time")
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User? @relation(fields: [userId], references: [userId])
}

// Keywords (关键词表)
model Keywords {
  keywordId             Int      @id @default(autoincrement()) @map("keyword_id")
  keyword               String   @unique @map("keyword") @default("")
  searchCount           Int      @map("search_count") @default(0)
  clickCount            Int      @map("click_count") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// FriendLinks (友情链接表)
model FriendLinks {
  linkId                Int      @id @default(autoincrement()) @map("link_id")
  linkName              String   @map("link_name") @default("")
  linkUrl               String   @map("link_url") @default("")
  linkImage             String   @map("link_image") @default("")
  linkDesc              String   @map("link_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// StatisticsBase (基础统计表)
model StatisticsBase {
  statId                Int      @id @default(autoincrement()) @map("stat_id")
  statType              Int      @map("stat_type") @default(0)
  statDate              DateTime @map("stat_date") @default(now())
  totalCount            Int      @map("total_count") @default(0)
  totalAmount           Decimal  @map("total_amount") @db.Decimal(10, 2) @default(0.00)
  extraData             String?  @map("extra_data") // JSON

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// StatisticsLog (统计日志表)
model StatisticsLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  statType              Int      @map("stat_type") @default(0)
  action                String   @map("action") @default("")
  data                  String?  @map("data") // JSON
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// RankGrowthLog (等级增长日志表)
model RankGrowthLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  rankId                Int      @map("rank_id")
  growthPoints          Int      @map("growth_points") @default(0)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  userRank              UserRank @relation(fields: [rankId], references: [rankId], onDelete: Cascade)
}

// Album (相册表 - UI装修)
model Album {
  albumId               Int      @id @default(autoincrement()) @map("album_id")
  albumName             String   @map("album_name") @default("")
  albumDesc             String   @map("album_desc") @default("")
  albumType             Int      @map("album_type") @default(0)
  cover                 String   @map("cover") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// AppVersion (App版本表)
model AppVersion {
  versionId             Int      @id @default(autoincrement()) @map("version_id")
  versionCode           String   @map("version_code") @default("")
  versionName           String   @map("version_name") @default("")
  platform              String   @map("platform") @default("")
  downloadUrl           String   @map("download_url") @default("")
  changeLog             String   @map("change_log") @default("")
  isForceUpdate         Int      @map("is_force_update") @default(0)
  status                Int      @map("status") @default(1)
  publishTime           DateTime @map("publish_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Decorate (装修表)
model Decorate {
  decorateId            Int      @id @default(autoincrement()) @map("decorate_id")
  decorateName          String   @map("decorate_name") @default("")
  decorateType          Int      @map("decorate_type") @default(0)
  pageType              Int      @map("page_type") @default(0)
  data                  String   @map("data") // JSON
  status                Int      @map("status") @default(1)
  isDefault             Int      @map("is_default") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// DecorateDiscrete (离散装修表)
model DecorateDiscrete {
  discreteId            Int      @id @default(autoincrement()) @map("discrete_id")
  decorateId            Int      @map("decorate_id")
  componentName         String   @map("component_name") @default("")
  componentData         String   @map("component_data") // JSON
  position              Int      @map("position") @default(0)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  decorate              Decorate @relation(fields: [decorateId], references: [decorateId], onDelete: Cascade)
}

// DecorateShare (装修分享表)
model DecorateShare {
  shareId               Int      @id @default(autoincrement()) @map("share_id")
  decorateId            Int      @map("decorate_id")
  shareCode             String   @unique @map("share_code") @default("")
  shareUrl              String   @map("share_url") @default("")
  shareCount            Int      @map("share_count") @default(0)
  viewCount             Int      @map("view_count") @default(0)
  status                Int      @map("status") @default(1)
  createTime            DateTime @map("create_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  decorate              Decorate @relation(fields: [decorateId], references: [decorateId], onDelete: Cascade)
}

// MobileCatNav (移动端分类导航表)
model MobileCatNav {
  navId                 Int      @id @default(autoincrement()) @map("nav_id")
  categoryId            Int      @map("category_id")
  navName               String   @map("nav_name") @default("")
  navImage              String   @map("nav_image") @default("")
  navLink               String   @map("nav_link") @default("")
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  category              Category @relation(fields: [categoryId], references: [categoryId])
}

// PcCatFloor (PC端分类楼层表)
model PcCatFloor {
  floorId               Int      @id @default(autoincrement()) @map("floor_id")
  categoryId            Int      @map("category_id")
  floorName             String   @map("floor_name") @default("")
  floorImage            String   @map("floor_image") @default("")
  floorDesc             String   @map("floor_desc") @default("")
  products              String?  @map("products") // JSON
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  category              Category @relation(fields: [categoryId], references: [categoryId])
}

// PcNavigation (PC端导航表)
model PcNavigation {
  navId                 Int      @id @default(autoincrement()) @map("nav_id")
  navName               String   @map("nav_name") @default("")
  navLink               String   @map("nav_link") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)
  navType               Int      @map("nav_type") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  parentNav             PcNavigation? @relation("PcNavigationHierarchy", fields: [parentId], references: [navId])
  childNavs             PcNavigation[] @relation("PcNavigationHierarchy")
}

// ECard (电子卡表)
model ECard {
  cardId                Int      @id @default(autoincrement()) @map("card_id")
  cardName              String   @map("card_name") @default("")
  cardDesc              String   @map("card_desc") @default("")
  cardImage             String   @map("card_image") @default("")
  cardPrice             Decimal  @map("card_price") @db.Decimal(10, 2) @default(0.00)
  cardValue             Decimal  @map("card_value") @db.Decimal(10, 2) @default(0.00)
  validityDays         Int      @map("validity_days") @default(0)
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ECardGroup (电子卡分组表)
model ECardGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  groupName             String   @map("group_name") @default("")
  groupDesc             String   @map("group_desc") @default("")
  groupImage            String   @map("group_image") @default("")
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// PriceInquiry (价格咨询表)
model PriceInquiry {
  inquiryId             Int      @id @default(autoincrement()) @map("inquiry_id")
  productId             Int      @map("product_id")
  userId                Int      @map("user_id")
  userName              String   @map("user_name") @default("")
  userMobile            String   @map("user_mobile") @default("")
  userEmail             String   @map("user_email") @default("")
  inquiryContent        String   @map("inquiry_content") @default("")
  replyContent          String   @map("reply_content") @default("")
  status                Int      @map("status") @default(0)
  addTime               DateTime @map("add_time") @default(now())
  replyTime             DateTime? @map("reply_time")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation(fields: [productId], references: [productId])
  user                  User?   @relation(fields: [userId], references: [userId])
}

// WechatLive (微信直播表)
model WechatLive {
  liveId                Int      @id @default(autoincrement()) @map("live_id")
  liveTitle             String   @map("live_title") @default("")
  liveDesc              String   @map("live_desc") @default("")
  liveImage             String   @map("live_image") @default("")
  liveUrl               String   @map("live_url") @default("")
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(0)
  viewCount             Int      @map("view_count") @default(0)
  likeCount             Int      @map("like_count") @default(0)
  shareCount            Int      @map("share_count") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// RefundApply (退款申请表)
model RefundApply {
  applyId               Int      @id @default(autoincrement()) @map("apply_id")
  orderId               Int      @map("order_id")
  orderItemId           Int      @map("order_item_id")
  userId                Int      @map("user_id")
  refundType            Int      @map("refund_type") @default(0)
  refundAmount          Decimal  @map("refund_amount") @db.Decimal(10, 2) @default(0.00)
  refundReason          String   @map("refund_reason") @default("")
  refundDesc            String   @map("refund_desc") @default("")
  refundProof           String?  @map("refund_proof") // JSON
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  order                 Order     @relation(fields: [orderId], references: [orderId])
  orderItem             OrderItem @relation(fields: [orderItemId], references: [itemId])
  user                  User      @relation(fields: [userId], references: [userId])
  refundLogs            RefundLog[]
}

// RefundLog (退款日志表)
model RefundLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  applyId               Int      @map("apply_id")
  adminId               Int      @map("admin_id") @default(0)
  action                String   @map("action") @default("")
  actionDesc            String   @map("action_desc") @default("")
  beforeStatus          Int      @map("before_status") @default(0)
  afterStatus           Int      @map("after_status") @default(0)
  remark                String   @map("remark") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  refundApply           RefundApply @relation(fields: [applyId], references: [applyId], onDelete: Cascade)
  adminUser             AdminUser?  @relation(fields: [adminId], references: [adminId])
}

// RechargeSetting (充值设置表)
model RechargeSetting {
  settingId             Int      @id @default(autoincrement()) @map("setting_id")
  rechargeAmount        Decimal  @map("recharge_amount") @db.Decimal(10, 2) @default(0.00)
  giveAmount           Decimal  @map("give_amount") @db.Decimal(10, 2) @default(0.00)
  givePoints           Int      @map("give_points") @default(0)
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// DistributionLog (分销日志表)
model DistributionLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  userId                Int      @map("user_id")
  fromUserId            Int      @map("from_user_id") @default(0)
  orderId               Int      @map("order_id") @default(0)
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User     @relation("DistributionLogUser", fields: [userId], references: [userId])
  fromUser              User?    @relation("DistributionLogFromUser", fields: [fromUserId], references: [userId])
  order                 Order?    @relation(fields: [orderId], references: [orderId])
}

// OrderConfig (订单配置表)
model OrderConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// OrderCouponDetail (订单优惠券明细表)
model OrderCouponDetail {
  detailId              Int      @id @default(autoincrement()) @map("detail_id")
  orderId               Int      @map("order_id")
  couponId              Int      @map("coupon_id")
  userCouponId          Int      @map("user_coupon_id")
  couponAmount          Decimal  @map("coupon_amount") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  order                 Order       @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  coupon                Coupon      @relation(fields: [couponId], references: [couponId])
  userCoupon            UserCoupon  @relation(fields: [userCouponId], references: [id])
}