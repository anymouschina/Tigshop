generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AdminUser (后台用户表)
model AdminUser {
  adminId         Int     @id @default(autoincrement()) @map("admin_id")
  username        String  @default("") @map("username")
  adminType       String  @default("admin") @map("admin_type")
  mobile          String  @default("") @map("mobile")
  avatar          String? @map("avatar")
  password        String  @default("") @map("password")
  email           String  @default("") @map("email")
  addTime         Int     @default(0) @map("add_time")
  authList        String  @default("") @map("auth_list") // JSON
  userId          Int     @default(0) @map("user_id")
  suppliersId     Int     @default(0) @map("suppliers_id")
  roleId          Int     @map("role_id")
  merchantId      Int     @default(0) @map("merchant_id")
  parentId        Int     @default(0) @map("parent_id")
  menuTag         String? @map("menu_tag") // JSON
  orderExport     String? @map("order_export") // JSON
  extra           String? @map("extra") // JSON
  shopId          Int     @default(0) @map("shop_id")
  isUsing         Int     @default(0) @map("is_using")
  initialPassword String  @default("") @map("initial_password")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  adminRole AdminRole @relation(fields: [roleId], references: [roleId])
}

// AdminRole (后台角色表)
model AdminRole {
  roleId        Int    @id @default(autoincrement()) @map("role_id")
  roleName      String @default("") @map("role_name")
  roleDesc      String @default("") @map("role_desc")
  authorityList String @default("") @map("authority_list") // JSON
  adminType     String @default("admin") @map("admin_type")
  merchantId    Int    @default(0) @map("merchant_id")
  shopId        Int    @default(0) @map("shop_id")
  vendorId      Int    @default(0) @map("vendor_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  adminUsers AdminUser[]
}

// User (用户表)
model User {
  userId                   Int       @id @default(autoincrement()) @map("user_id")
  username                 String    @unique @default("") @map("username")
  avatar                   String    @default("") @map("avatar")
  mobile                   String    @unique @default("") @map("mobile")
  mobileValidated          Int       @default(0) @map("mobile_validated")
  email                    String    @unique @default("") @map("email")
  emailValidated           Int       @default(0) @map("email_validated")
  nickname                 String    @default("") @map("nickname")
  password                 String    @default("") @map("password")
  birthday                 DateTime? @map("birthday")
  balance                  Decimal   @default(0.00) @map("balance") @db.Decimal(10, 2)
  frozenBalance            Decimal   @default(0.00) @map("frozen_balance") @db.Decimal(10, 2)
  points                   Int       @default(0) @map("points")
  growthPoints             Int       @default(0) @map("growth_points")
  addressId                Int       @default(0) @map("address_id")
  regTime                  DateTime  @default(now()) @map("reg_time")
  lastLogin                DateTime  @default(now()) @map("last_login")
  lastIp                   String    @default("") @map("last_ip")
  rankId                   Int       @default(0) @map("rank_id")
  referrerUserId           Int       @default(0) @map("referrer_user_id")
  fromTag                  Int       @default(0) @map("from_tag")
  isSvip                   Int       @default(0) @map("is_svip")
  svipExpireTime           DateTime  @default(now()) @map("svip_expire_time")
  orderCount               Int       @default(0) @map("order_count")
  orderAmount              Decimal   @default(0.00) @map("order_amount") @db.Decimal(10, 2)
  historyProductIds        String?   @map("history_product_ids") // JSON array
  isDistribution           Int       @default(0) @map("is_distribution")
  distributionRegisterTime DateTime? @map("distribution_register_time")
  wechatImg                String    @default("") @map("wechat_img")
  isCompanyAuth            Int       @default(0) @map("is_company_auth")
  status                   Int       @default(1) @map("status")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userAddresses     UserAddress[]
  cartItems         Cart[]
  orders            Order[]
  userCoupons       UserCoupon[]
  comments          Comment[]
  collectProducts   CollectProduct[]
  collectShops      CollectShop[]
  blacklistedTokens BlacklistedToken[]
}

// User Address (用户地址表)
model UserAddress {
  userId      Int    @map("user_id")
  consignee   String @default("") @map("consignee")
  email       String @default("") @map("email")
  regionIds   String @map("region_ids") // JSON array
  regionNames String @map("region_names") // JSON array
  address     String @default("") @map("address")
  postcode    String @default("") @map("postcode")
  telephone   String @default("") @map("telephone")
  mobile      String @default("") @map("mobile")
  isDefault   Int    @default(0) @map("is_default")
  isSelected  Int    @default(0) @map("is_selected")

  updatedAt DateTime @updatedAt
  // Relationships
}

model Product {
  productId         Int      @id @default(autoincrement()) @map("product_id")
  productName       String   @default("") @map("product_name")
  productSn         String   @default("") @map("product_sn")
  productTsn        String?  @map("product_tsn")
  productStock      Int      @default(0) @map("product_stock")
  productPrice      Decimal  @default(0.00) @map("product_price") @db.Decimal(10, 2)
  marketPrice       Decimal  @default(0.00) @map("market_price") @db.Decimal(10, 2)
  shippingTplId     Int      @default(0) @map("shipping_tpl_id")
  productStatus     Int      @default(1) @map("product_status")
  productType       Int      @default(1) @map("product_type")
  categoryId        Int      @map("category_id")
  brandId           Int      @default(0) @map("brand_id")
  shopId            Int      @default(0) @map("shop_id")
  keywords          String   @default("") @map("keywords")
  shopCategoryId    Int      @default(0) @map("shop_category_id")
  checkStatus       Int      @default(1) @map("check_status")
  checkReason       String   @default("") @map("check_reason")
  clickCount        Int      @default(0) @map("click_count")
  productWeight     Decimal  @default(0.000) @map("product_weight") @db.Decimal(10, 3)
  isPromote         Int      @default(0) @map("is_promote")
  isPromoteActivity Int      @default(0) @map("is_promote_activity")
  promotePrice      Decimal  @default(0.00) @map("promote_price") @db.Decimal(10, 2)
  promoteStartDate  DateTime @default(now()) @map("promote_start_date")
  promoteEndDate    DateTime @default(now()) @map("promote_end_date")
  seckillMaxNum     Int      @default(0) @map("seckill_max_num")
  productBrief      String   @default("") @map("product_brief")
  productDesc       String?  @map("product_desc")
  picUrl            String   @default("") @map("pic_url")
  picThumb          String   @default("") @map("pic_thumb")
  picOriginal       String   @default("") @map("pic_original")
  commentTag        String?  @map("comment_tag")
  freeShipping      Int      @default(0) @map("free_shipping")
  integral          Int      @default(0) @map("integral")
  addTime           DateTime @default(now()) @map("add_time")
  sortOrder         Int      @default(100) @map("sort_order")
  storeSortOrder    Int      @default(100) @map("store_sort_order")
  isDelete          Int      @default(0) @map("is_delete")
  isBest            Int      @default(0) @map("is_best")
  isNew             Int      @default(0) @map("is_new")
  isHot             Int      @default(0) @map("is_hot")
  lastUpdate        DateTime @default(now()) @map("last_update")
  remark            String   @default("") @map("remark")
  giveIntegral      Int      @default(-1) @map("give_integral")
  rankIntegral      Int      @default(-1) @map("rank_integral")
  suppliersId       Int?     @map("suppliers_id")
  virtualSales      Int      @default(0) @map("virtual_sales")
  limitNumber       Int      @default(0) @map("limit_number")
  productCare       String?  @map("product_care")
  productRelated    String?  @map("product_related") // JSON array
  productServiceIds String?  @map("product_service_ids") // JSON array

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  category          Category           @relation(fields: [categoryId], references: [categoryId])
  brand             Brand?             @relation(fields: [brandId], references: [brandId])
  shop              Shop?              @relation(fields: [shopId], references: [shopId])
  productSku        ProductSku[]
  productAttributes ProductAttribute[]
  productGallery    ProductGallery[]
  cartItems         Cart[]
  orderItems        OrderItem[]
  comments          Comment[]
  collectProducts   CollectProduct[]
}

// Product SKU (商品SKU表)
model ProductSku {
  skuId           Int     @id @default(autoincrement()) @map("sku_id")
  productId       Int     @map("product_id")
  skuValue        String  @default("") @map("sku_value")
  skuData         String? @map("sku_data") // JSON data
  skuSn           String  @default("") @map("sku_sn")
  skuStock        Int     @default(0) @map("sku_stock")
  skuTsn          String  @default("") @map("sku_tsn")
  skuPrice        Decimal @default(0.00) @map("sku_price") @db.Decimal(10, 2)
  skuPromotePrice Decimal @default(0.00) @map("sku_promote_price") @db.Decimal(10, 2)
  skuMarketPrice  Decimal @default(0.00) @map("sku_market_price") @db.Decimal(10, 2)
  skuPic          String  @default("") @map("sku_pic")
  skuPicThumb     String  @default("") @map("sku_pic_thumb")
  skuWeight       Decimal @default(0.000) @map("sku_weight") @db.Decimal(10, 3)
  skuVolume       Decimal @default(0.000) @map("sku_volume") @db.Decimal(10, 3)
  skuCode         String  @default("") @map("sku_code")
  supplierId      Int     @default(0) @map("supplier_id")
  supplierSkuId   Int     @default(0) @map("supplier_sku_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  product    Product     @relation(fields: [productId], references: [productId], onDelete: Cascade)
  cartItems  Cart[]
  orderItems OrderItem[]
}

// Product Attributes (商品属性表)
model ProductAttribute {
  productId    Int     @map("product_id")
  attrType     Int     @default(0) @map("attr_type")
  attrPrice    Decimal @default(0.00) @map("attr_price") @db.Decimal(8, 2)
  attrColor    String  @default("") @map("attr_color")
  attrPic      String  @default("") @map("attr_pic")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

// Product Gallery (商品图片表)
model ProductGallery {
  picId       Int    @id @default(autoincrement()) @map("pic_id")
  productId   Int    @map("product_id")
  picUrl      String @default("") @map("pic_url")
  picDesc     String @default("") @map("pic_desc")
  picThumb    String @default("") @map("pic_thumb")
  picOriginal String @default("") @map("pic_original")
  picLarge    String @default("") @map("pic_large")
  sortOrder   Int    @default(1) @map("sort_order")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

// Category (分类表)
model Category {
  categoryId     Int    @id @default(autoincrement()) @map("category_id")
  categoryName   String @default("") @map("category_name")
  keywords       String @default("") @map("keywords")
  categoryDesc   String @default("") @map("category_desc")
  parentId       Int    @default(0) @map("parent_id")
  sortOrder      Int    @default(50) @map("sort_order")
  measureUnit    String @default("") @map("measure_unit")
  isShow         Int    @default(1) @map("is_show")
  seoTitle       String @default("") @map("seo_title")
  shortName      String @default("") @map("short_name")
  categoryPic    String @default("") @map("category_pic")
  categoryIco    String @default("") @map("category_ico")
  isHot          Int    @default(0) @map("is_hot")
  searchKeywords String @default("") @map("search_keywords")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  parentCategory  Category?  @relation("CategoryHierarchy", fields: [parentId], references: [categoryId])
  childCategories Category[] @relation("CategoryHierarchy")
  products        Product[]
}

// Shop (店铺表)
model Shop {
  shopId                  Int      @id @default(autoincrement()) @map("shop_id")
  shopTitle               String   @default("") @map("shop_title")
  addTime                 DateTime @default(now()) @map("add_time")
  shopLogo                String   @default("") @map("shop_logo")
  clickCount              Int      @default(0) @map("click_count")
  status                  Int      @default(1) @map("status")
  merchantId              Int      @default(0) @map("merchant_id")
  shopMoney               Decimal  @default(0.00) @map("shop_money") @db.Decimal(10, 2)
  frozenMoney             Decimal  @default(0.00) @map("frozen_money") @db.Decimal(10, 2)
  contactMobile           String   @default("") @map("contact_mobile")
  description             String   @default("") @map("description")
  kefuPhone               String   @default("") @map("kefu_phone")
  kefuWeixin              String   @default("") @map("kefu_weixin")
  kefuLink                String   @default("") @map("kefu_link")
  isContactKefu           Int      @default(1) @map("is_contact_kefu")
  kefuInlet               String?  @map("kefu_inlet") // JSON data
  lastLoginTime           DateTime @default(now()) @map("last_login_time")
  vendorSetPriceType      Int      @default(3) @map("vendor_set_price_type")
  vendorSetPriceAutoValue Decimal? @map("vendor_set_price_auto_value") @db.Decimal(10, 2)
  serviceFeeRate          Decimal? @map("service_fee_rate") @db.Decimal(10, 2)
  feeRate                 Decimal? @map("fee_rate") @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  products     Product[]
  orders       Order[]
  orderItems   OrderItem[]
  collectShops CollectShop[]
}

// Cart (购物车表)
model Cart {
  cartId        Int      @id @default(autoincrement()) @map("cart_id")
  userId        Int      @map("user_id")
  productId     Int      @map("product_id")
  productSn     String   @default("") @map("product_sn")
  picThumb      String   @default("") @map("pic_thumb")
  marketPrice   Decimal  @default(0.00) @map("market_price") @db.Decimal(10, 2)
  originalPrice Decimal  @default(0.00) @map("original_price") @db.Decimal(10, 2)
  quantity      Int      @default(0) @map("quantity")
  skuId         Int      @default(0) @map("sku_id")
  skuData       String?  @map("sku_data") // JSON data
  productType   Int      @default(0) @map("product_type")
  isChecked     Int      @default(1) @map("is_checked")
  shopId        Int      @default(0) @map("shop_id")
  type          Int      @default(1) @map("type")
  updateTime    DateTime @default(now()) @map("update_time")
  salesmanId    Int      @default(0) @map("salesman_id")
  extraSkuData  String?  @map("extra_sku_data") // JSON data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user       User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [productId])
  productSku ProductSku? @relation(fields: [skuId], references: [skuId])
}

// Order (订单表)
model Order {
  orderId            Int      @id @default(autoincrement()) @map("order_id")
  orderSn            String   @unique @default("") @map("order_sn")
  userId             Int      @map("user_id")
  parentOrderId      Int      @default(0) @map("parent_order_id")
  parentOrderSn      String   @default("") @map("parent_order_sn")
  orderStatus        Int      @default(0) @map("order_status")
  shippingStatus     Int      @default(0) @map("shipping_status")
  payStatus          Int      @default(0) @map("pay_status")
  addTime            DateTime @default(now()) @map("add_time")
  consignee          String   @default("") @map("consignee")
  address            String   @default("") @map("address")
  regionIds          String   @map("region_ids") // JSON array
  regionNames        String   @map("region_names") // JSON array
  addressData        String?  @map("address_data") // JSON data
  mobile             String   @default("") @map("mobile")
  email              String   @default("") @map("email")
  buyerNote          String   @default("") @map("buyer_note")
  adminNote          String   @default("") @map("admin_note")
  shippingMethod     Int      @default(1) @map("shipping_method")
  logisticsId        Int      @default(0) @map("logistics_id")
  logisticsName      String   @default("") @map("logistics_name")
  shippingTypeId     Int      @default(0) @map("shipping_type_id")
  shippingTypeName   String   @default("") @map("shipping_type_name")
  trackingNo         String   @default("") @map("tracking_no")
  shippingTime       DateTime @default(now()) @map("shipping_time")
  receivedTime       DateTime @default(now()) @map("received_time")
  payTypeId          Int      @default(0) @map("pay_type_id")
  payTime            DateTime @default(now()) @map("pay_time")
  usePoints          Int      @default(0) @map("use_points")
  isNeedCommisson    Int      @default(0) @map("is_need_commisson")
  distributionStatus Int      @default(0) @map("distribution_status")
  referrerUserId     Int      @default(0) @map("referrer_user_id")
  isDel              Int      @default(0) @map("is_del")
  shopId             Int      @default(0) @map("shop_id")
  isStoreSplited     Int      @default(0) @map("is_store_splited")
  commentStatus      Int      @default(0) @map("comment_status")
  totalAmount        Decimal  @default(0.00) @map("total_amount") @db.Decimal(10, 2)
  paidAmount         Decimal  @default(0.00) @map("paid_amount") @db.Decimal(10, 2)
  unpaidAmount       Decimal  @default(0.00) @map("unpaid_amount") @db.Decimal(10, 2)
  unrefundAmount     Decimal  @default(0.00) @map("unrefund_amount") @db.Decimal(10, 2)
  productAmount      Decimal  @default(0.00) @map("product_amount") @db.Decimal(10, 2)
  couponAmount       Decimal  @default(0.00) @map("coupon_amount") @db.Decimal(10, 2)
  pointsAmount       Decimal  @default(0.00) @map("points_amount") @db.Decimal(10, 2)
  discountAmount     Decimal  @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  balance            Decimal  @default(0.00) @map("balance") @db.Decimal(10, 2)
  onlinePaidAmount   Decimal  @default(0.00) @map("online_paid_amount") @db.Decimal(10, 2)
  offlinePaidAmount  Decimal  @default(0.00) @map("offline_paid_amount") @db.Decimal(10, 2)
  serviceFee         Decimal  @default(0.00) @map("service_fee") @db.Decimal(10, 2)
  shippingFee        Decimal  @default(0.00) @map("shipping_fee") @db.Decimal(10, 2)
  invoiceFee         Decimal  @default(0.00) @map("invoice_fee") @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user        User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  shop        Shop?        @relation(fields: [shopId], references: [shopId])
  orderItems  OrderItem[]
  payments    Payment[]
  userCoupons UserCoupon[]
}

// Order Item (订单项表)
model OrderItem {
  itemId             Int     @id @default(autoincrement()) @map("item_id")
  orderId            Int     @map("order_id")
  orderSn            String  @default("") @map("order_sn")
  userId             Int     @map("user_id")
  price              Decimal @default(0.00) @map("price") @db.Decimal(10, 2)
  quantity           Int     @default(1) @map("quantity")
  productId          Int     @map("product_id")
  productName        String  @default("") @map("product_name")
  productSn          String  @default("") @map("product_sn")
  picThumb           String  @default("") @map("pic_thumb")
  skuId              Int     @default(0) @map("sku_id")
  skuData            String  @map("sku_data") // JSON data
  deliveryQuantity   Int     @default(0) @map("delivery_quantity")
  productType        Int     @default(1) @map("product_type")
  isGift             Int     @default(0) @map("is_gift")
  shopId             Int     @default(0) @map("shop_id")
  isPin              Int     @default(0) @map("is_pin")
  prepayPrice        Decimal @default(0.00) @map("prepay_price") @db.Decimal(8, 2)
  commission         String  @default("") @map("commission")
  originPrice        Decimal @default(0.00) @map("origin_price") @db.Decimal(10, 2)
  promotionData      String? @map("promotion_data") // JSON data
  isSeckill          Int     @default(0) @map("is_seckill")
  extraSkuData       String? @map("extra_sku_data") // JSON data
  suppliersId        Int     @default(0) @map("suppliers_id")
  cardGroupName      String  @default("") @map("card_group_name")
  vendorProductId    Int?    @map("vendor_product_id")
  vendorProductSkuId Int?    @map("vendor_product_sku_id")
  vendorId           Int?    @map("vendor_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  order      Order       @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [productId])
  productSku ProductSku? @relation(fields: [skuId], references: [skuId])
  shop       Shop?       @relation(fields: [shopId], references: [shopId])
}

// Payment (支付表)
model Payment {
  paylogId      Int      @id @default(autoincrement()) @map("paylog_id")
  paySn         String   @unique @default("") @map("pay_sn")
  payName       String   @default("") @map("pay_name")
  orderId       Int      @map("order_id")
  orderSn       String   @default("") @map("order_sn")
  orderAmount   Decimal  @map("order_amount") @db.Decimal(10, 2)
  orderType     Int      @default(0) @map("order_type")
  payAmount     Decimal  @default(0.00) @map("pay_amount") @db.Decimal(10, 2)
  payStatus     Int      @default(0) @map("pay_status")
  payCode       String   @default("") @map("pay_code")
  addTime       DateTime @default(now()) @map("add_time")
  transactionId String   @default("") @map("transaction_id")
  notifyData    String   @default("") @map("notify_data")
  refundAmount  Decimal  @default(0.00) @map("refund_amount") @db.Decimal(8, 2)
  tokenCode     String   @default("") @map("token_code")
  appid         String?  @map("appid")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

// Coupon (优惠券表)
model Coupon {
  couponId        Int      @id @default(autoincrement()) @map("coupon_id")
  couponName      String   @default("") @map("coupon_name")
  couponMoney     Decimal  @default(0.00) @map("coupon_money") @db.Decimal(10, 2)
  couponDiscount  Decimal  @default(10.0) @map("coupon_discount") @db.Decimal(4, 1)
  couponDesc      String   @default("") @map("coupon_desc")
  couponType      Int      @default(1) @map("coupon_type")
  sendRange       Int      @default(0) @map("send_range")
  sendRangeData   String   @default("") @map("send_range_data") // JSON data
  minOrderAmount  Decimal  @default(0.00) @map("min_order_amount") @db.Decimal(10, 2)
  sendStartDate   DateTime @default(now()) @map("send_start_date")
  sendEndDate     DateTime @default(now()) @map("send_end_date")
  sendType        Int      @default(0) @map("send_type")
  useDay          Int      @default(30) @map("use_day")
  useStartDate    DateTime @default(now()) @map("use_start_date")
  useEndDate      DateTime @default(now()) @map("use_end_date")
  isShow          Int      @default(0) @map("is_show")
  isGlobal        Int      @default(0) @map("is_global")
  isNewUser       Int      @default(0) @map("is_new_user")
  enabledClickGet Int      @default(0) @map("enabled_click_get")
  limitUserRank   String?  @map("limit_user_rank") // JSON data
  shopId          Int      @default(0) @map("shop_id")
  isDelete        Int      @default(0) @map("is_delete")
  limitNum        Int      @default(0) @map("limit_num")
  delayDay        Int      @default(0) @map("delay_day")
  sendNum         Int      @default(1) @map("send_num")
  maxOrderAmount  Decimal  @default(0.00) @map("max_order_amount") @db.Decimal(10, 2)
  couponUnit      Int      @default(1) @map("coupon_unit")
  reduceType      Int      @default(1) @map("reduce_type")
  addTime         DateTime @default(now()) @map("add_time")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userCoupons UserCoupon[]
}

// User Coupon (用户优惠券表)
model UserCoupon {
  id        Int       @id @default(autoincrement())
  couponId  Int       @map("coupon_id")
  couponSn  String    @default("") @map("coupon_sn")
  userId    Int       @map("user_id")
  usedTime  DateTime? @map("used_time")
  orderId   Int       @default(0) @map("order_id")
  startDate DateTime  @default(now()) @map("start_date")
  endDate   DateTime  @default(now()) @map("end_date")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  coupon Coupon @relation(fields: [couponId], references: [couponId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  order  Order? @relation(fields: [orderId], references: [orderId])
}

// Comment (评论表)
model Comment {
  commentId   Int      @id @default(autoincrement()) @map("comment_id")
  userId      Int      @map("user_id")
  username    String   @default("") @map("username")
  avatar      String   @default("") @map("avatar")
  productId   Int      @map("product_id")
  orderId     Int      @default(0) @map("order_id")
  orderItemId Int      @default(0) @map("order_item_id")
  commentRank Int      @default(0) @map("comment_rank")
  content     String   @default("") @map("content")
  addTime     DateTime @default(now()) @map("add_time")
  status      Int      @default(0) @map("status")
  parentId    Int      @default(0) @map("parent_id")
  usefull     Int      @default(0) @map("usefull")
  useless     Int      @default(0) @map("useless")
  commentTag  String?  @map("comment_tag") // JSON data
  showPics    String?  @map("show_pics") // JSON data
  isRecommend Int      @default(0) @map("is_recommend")
  isTop       Int      @default(0) @map("is_top")
  isShowed    Int      @default(0) @map("is_showed")
  isDefault   Int      @default(0) @map("is_default")
  sortOrder   Int      @default(50) @map("sort_order")
  shopId      Int      @default(0) @map("shop_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user          User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product       Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  parentComment Comment?  @relation("CommentHierarchy", fields: [parentId], references: [commentId])
  replies       Comment[] @relation("CommentHierarchy")
}

// Favorite/Collect Product (收藏表)
model CollectProduct {
  collectId Int      @id @default(autoincrement()) @map("collect_id")
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  addTime   DateTime @default(now()) @map("add_time")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@unique([userId, productId])
}

// CollectShop (收藏店铺表)
model CollectShop {
  collectId Int      @id @default(autoincrement()) @map("collect_id")
  userId    Int      @map("user_id")
  shopId    Int      @map("shop_id")
  addTime   DateTime @default(now()) @map("add_time")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  shop      Shop     @relation(fields: [shopId], references: [shopId], onDelete: Cascade)

  @@unique([userId, shopId])
}

// Brand (品牌表)
model Brand {
  brandId      Int     @id @default(autoincrement()) @map("brand_id")
  brandName    String  @default("") @map("brand_name")
  brandLogo    String  @default("") @map("brand_logo")
  brandDesc    String? @map("brand_desc")
  siteUrl      String  @default("") @map("site_url")
  sortOrder    Int     @default(50) @map("sort_order")
  isShow       Int     @default(1) @map("is_show")
  brandType    String  @default("") @map("brand_type")
  brandIsHot   Int     @default(0) @map("brand_is_hot")
  firstWord    String  @default("") @map("first_word")
  isStoreBrand Int     @default(0) @map("is_store_brand")
  checkStatus  Int     @default(0) @map("check_status")
  brandEnName  String  @default("") @map("brand_en_name")
  shopId       Int     @default(0) @map("shop_id")
  status       Int     @default(0) @map("status")
  rejectRemark String? @map("reject_remark")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  products Product[]
}

// BlacklistedToken (黑名单令牌表)
model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("blacklisted_token")
}

// Article (文章表)
model Article {
  articleId   Int      @id @default(autoincrement()) @map("article_id")
  title       String   @default("") @map("title")
  content     String   @default("") @map("content")
  image       String?  @map("image")
  categoryId  Int      @default(0) @map("category_id")
  author      String   @default("") @map("author")
  source      String   @default("") @map("source")
  keywords    String   @default("") @map("keywords")
  description String   @default("") @map("description")
  clickCount  Int      @default(0) @map("click_count")
  isShow      Int      @default(1) @map("is_show")
  sortOrder   Int      @default(100) @map("sort_order")
  addTime     DateTime @default(now()) @map("add_time")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article")
}

// ========================================
// ADDITIONAL MODELS FROM PHASE 2-5
// ========================================

model Promotion {
  promotionId          Int      @id @default(autoincrement()) @map("promotion_id")
  promotionName        String   @map("promotion_name") @default("")
  promotionType        Int      @map("promotion_type") @default(0)
  promotionDesc        String   @map("promotion_desc") @default("")
  startTime            DateTime @map("start_time") @default(now())
  endTime              DateTime @map("end_time") @default(now())
  status               Int      @map("status") @default(1)
  isShow               Int      @map("is_show") @default(1)
  sortOrder            Int      @map("sort_order") @default(100)
  shopId               Int      @map("shop_id") @default(0)
  productId            Int      @map("product_id") @default(0)
  categoryId           Int      @map("category_id") @default(0)
  rules                String?  @map("rules") // JSON

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  shop                 Shop?     @relation(fields: [shopId], references: [shopId])
  product              Product?  @relation(fields: [productId], references: [productId])
}

// TimeDiscount (限时折扣表)
model TimeDiscount {
  discountId           Int      @id @default(autoincrement()) @map("discount_id")
  discountName         String   @map("discount_name") @default("")
  productId            Int      @map("product_id")
  skuId                Int      @map("sku_id") @default(0)
  discount             Int      @map("discount") @default(0)
  discountAmount       Decimal  @map("discount_amount") @db.Decimal(10, 2) @default(0.00)
  startTime            DateTime @map("start_time") @default(now())
  endTime              DateTime @map("end_time") @default(now())
  status               Int      @map("status") @default(1)
  shopId               Int      @map("shop_id") @default(0)
  sortOrder            Int      @map("sort_order") @default(100)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  product              Product   @relation(fields: [productId], references: [productId])
  productSku           ProductSku? @relation(fields: [skuId], references: [skuId])
  shop                 Shop?     @relation(fields: [shopId], references: [shopId])
}

// TimeDiscountItem (限时折扣项表)
model TimeDiscountItem {
  itemId               Int      @id @default(autoincrement()) @map("item_id")
  discountId           Int      @map("discount_id")
  productId            Int      @map("product_id")
  skuId                Int      @map("sku_id") @default(0)
  discount             Int      @map("discount") @default(0)
  discountAmount       Decimal  @map("discount_amount") @db.Decimal(10, 2) @default(0.00)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  timeDiscount         TimeDiscount @relation(fields: [discountId], references: [discountId], onDelete: Cascade)
  product              Product      @relation(fields: [productId], references: [productId])
  productSku           ProductSku?  @relation(fields: [skuId], references: [skuId])
}

// Seckill (秒杀活动表)
model Seckill {
  seckillId             Int      @id @default(autoincrement()) @map("seckill_id")
  seckillName           String   @map("seckill_name") @default("")
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)
  shopId                Int      @map("shop_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop?           @relation(fields: [shopId], references: [shopId])
  seckillItems          SeckillItem[]
}

// SeckillItem (秒杀项表)
model SeckillItem {
  itemId                Int      @id @default(autoincrement()) @map("item_id")
  seckillId             Int      @map("seckill_id")
  productId             Int      @map("product_id")
  skuId                 Int      @map("sku_id") @default(0)
  seckillPrice          Decimal  @map("seckill_price") @db.Decimal(10, 2) @default(0.00)
  seckillStock          Int      @map("seckill_stock") @default(0)
  seckillLimit          Int      @map("seckill_limit") @default(0)
  seckillSales          Int      @map("seckill_sales") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  seckill               Seckill     @relation(fields: [seckillId], references: [seckillId], onDelete: Cascade)
  product               Product     @relation(fields: [productId], references: [productId])
  productSku            ProductSku? @relation(fields: [skuId], references: [skuId])
}

// Bargain (砍价活动表)
model Bargain {
  bargainId             Int      @id @default(autoincrement()) @map("bargain_id")
  bargainName           String   @map("bargain_name") @default("")
  productId             Int      @map("product_id")
  skuId                 Int      @map("sku_id") @default(0)
  originalPrice         Decimal  @map("original_price") @db.Decimal(10, 2) @default(0.00)
  floorPrice            Decimal  @map("floor_price") @db.Decimal(10, 2) @default(0.00)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  shopId                Int      @map("shop_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product     @relation(fields: [productId], references: [productId])
  productSku            ProductSku? @relation(fields: [skuId], references: [skuId])
  shop                  Shop?       @relation(fields: [shopId], references: [shopId])
  bargainGroups         BargainGroup[]
  bargainLogs           BargainLog[]
}

// BargainGroup (砍价团表)
model BargainGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  bargainId             Int      @map("bargain_id")
  userId                Int      @map("user_id")
  currentPrice          Decimal  @map("current_price") @db.Decimal(10, 2) @default(0.00)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(0)
  participantCount      Int      @map("participant_count") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  bargain               Bargain @relation(fields: [bargainId], references: [bargainId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId])
}

// BargainLog (砍价日志表)
model BargainLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  bargainId             Int      @map("bargain_id")
  groupId               Int      @map("group_id") @default(0)
  userId                Int      @map("user_id")
  helpUserId            Int      @map("help_user_id") @default(0)
  bargainAmount         Decimal  @map("bargain_amount") @db.Decimal(10, 2) @default(0.00)
  currentPrice          Decimal  @map("current_price") @db.Decimal(10, 2) @default(0.00)
  bargainTime           DateTime @map("bargain_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  bargain               Bargain      @relation(fields: [bargainId], references: [bargainId], onDelete: Cascade)
  bargainGroup          BargainGroup? @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  user                  User         @relation(fields: [userId], references: [userId])
  helpUser              User?        @relation("BargainHelpUser", fields: [helpUserId], references: [userId])
}

// Groupon (团购表)
model Groupon {
  grouponId             Int      @id @default(autoincrement()) @map("groupon_id")
  grouponName           String   @map("groupon_name") @default("")
  productId             Int      @map("product_id")
  skuId                 Int      @map("sku_id") @default(0)
  grouponPrice          Decimal  @map("groupon_price") @db.Decimal(10, 2) @default(0.00)
  originalPrice         Decimal  @map("original_price") @db.Decimal(10, 2) @default(0.00)
  minPeople             Int      @map("min_people") @default(2)
  maxPeople             Int      @map("max_people") @default(0)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  shopId                Int      @map("shop_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product     @relation(fields: [productId], references: [productId])
  productSku            ProductSku? @relation(fields: [skuId], references: [skuId])
  shop                  Shop?       @relation(fields: [shopId], references: [shopId])
  grouponItems          GrouponItem[]
}

// GrouponItem (团购项表)
model GrouponItem {
  itemId                Int      @id @default(autoincrement()) @map("item_id")
  grouponId             Int      @map("groupon_id")
  userId                Int      @map("user_id")
  orderId               Int      @map("order_id") @default(0)
  joinTime              DateTime @map("join_time") @default(now())
  status                Int      @map("status") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  groupon               Groupon @relation(fields: [grouponId], references: [grouponId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId])
  order                 Order?   @relation(fields: [orderId], references: [orderId])
}

// PointsExchange (积分兑换表)
model PointsExchange {
  exchangeId            Int      @id @default(autoincrement()) @map("exchange_id")
  exchangeName          String   @map("exchange_name") @default("")
  exchangeDesc          String   @map("exchange_desc") @default("")
  productId             Int      @map("product_id") @default(0)
  points                Int      @map("points") @default(0)
  stock                 Int      @map("stock") @default(0)
  exchangeCount         Int      @map("exchange_count") @default(0)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product? @relation(fields: [productId], references: [productId])
}

// Sign (签到表)
model Sign {
  signId                Int      @id @default(autoincrement()) @map("sign_id")
  userId                Int      @map("user_id")
  signDate              DateTime @map("sign_date") @default(now())
  signPoints            Int      @map("sign_points") @default(0)
  consecutiveDays       Int      @map("consecutive_days") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, signDate])
}

// SignSetting (签到设置表)
model SignSetting {
  settingId             Int      @id @default(autoincrement()) @map("setting_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ProductGift (商品赠品表)
model ProductGift {
  giftId                Int      @id @default(autoincrement()) @map("gift_id")
  productId             Int      @map("product_id")
  giftProductId         Int      @map("gift_product_id")
  giftQuantity          Int      @map("gift_quantity") @default(1)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation("ProductGiftMain", fields: [productId], references: [productId])
  giftProduct           Product @relation("ProductGiftItem", fields: [giftProductId], references: [productId])
}

// ProductVideo (商品视频表)
model ProductVideo {
  videoId               Int      @id @default(autoincrement()) @map("video_id")
  productId             Int      @map("product_id")
  videoUrl              String   @map("video_url") @default("")
  videoCover            String   @map("video_cover") @default("")
  videoTitle            String   @map("video_title") @default("")
  videoDesc             String   @map("video_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

// ProductGroup (商品分组表)
model ProductGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  groupName             String   @map("group_name") @default("")
  groupDesc             String   @map("group_desc") @default("")
  groupImage            String   @map("group_image") @default("")
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ProductPackage (商品套餐表)
model ProductPackage {
  packageId             Int      @id @default(autoincrement()) @map("package_id")
  packageName           String   @map("package_name") @default("")
  packageDesc           String   @map("package_desc") @default("")
  packagePrice          Decimal  @map("package_price") @db.Decimal(10, 2) @default(0.00)
  marketPrice           Decimal  @map("market_price") @db.Decimal(10, 2) @default(0.00)
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ProductServices (商品服务表)
model ProductServices {
  serviceId             Int      @id @default(autoincrement()) @map("service_id")
  productId             Int      @map("product_id")
  serviceName           String   @map("service_name") @default("")
  serviceDesc           String   @map("service_desc") @default("")
  serviceIcon           String   @map("service_icon") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

// ProductRelated (相关商品表)
model ProductRelated {
  relatedId             Int      @id @default(autoincrement()) @map("related_id")
  productId             Int      @map("product_id")
  relatedProductId      Int      @map("related_product_id")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation("ProductRelatedMain", fields: [productId], references: [productId])
  relatedProduct        Product @relation("ProductRelatedItem", fields: [relatedProductId], references: [productId])
}

// UserInvoice (用户发票表)
model UserInvoice {
  invoiceId             Int      @id @default(autoincrement()) @map("invoice_id")
  userId                Int      @map("user_id")
  invoiceType           Int      @map("invoice_type") @default(0)
  invoiceTitle          String   @map("invoice_title") @default("")
  taxNumber             String   @map("tax_number") @default("")
  bankName              String   @map("bank_name") @default("")
  bankAccount           String   @map("bank_account") @default("")
  address               String   @map("address") @default("")
  phone                 String   @map("phone") @default("")
  isDefault             Int      @map("is_default") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// UserRechargeOrder (用户充值订单表)
model UserRechargeOrder {
  rechargeId            Int      @id @default(autoincrement()) @map("recharge_id")
  userId                Int      @map("user_id")
  rechargeSn            String   @unique @map("recharge_sn") @default("")
  rechargeAmount        Decimal  @map("recharge_amount") @db.Decimal(10, 2) @default(0.00)
  payAmount             Decimal  @map("pay_amount") @db.Decimal(10, 2) @default(0.00)
  payType               Int      @map("pay_type") @default(0)
  payStatus             Int      @map("pay_status") @default(0)
  payTime               DateTime? @map("pay_time")
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// UserWithdrawAccount (用户提现账户表)
model UserWithdrawAccount {
  accountId             Int      @id @default(autoincrement()) @map("account_id")
  userId                Int      @map("user_id")
  accountType           Int      @map("account_type") @default(0)
  accountName           String   @map("account_name") @default("")
  accountNumber         String   @map("account_number") @default("")
  bankName              String   @map("bank_name") @default("")
  bankBranch            String   @map("bank_branch") @default("")
  isDefault             Int      @map("is_default") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// UserWithdrawApply (用户提现申请表)
model UserWithdrawApply {
  applyId               Int      @id @default(autoincrement()) @map("apply_id")
  userId                Int      @map("user_id")
  withdrawAmount        Decimal  @map("withdraw_amount") @db.Decimal(10, 2) @default(0.00)
  fee                   Decimal  @map("fee") @db.Decimal(10, 2) @default(0.00)
  actualAmount          Decimal  @map("actual_amount") @db.Decimal(10, 2) @default(0.00)
  accountId             Int      @map("account_id")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  withdrawAccount       UserWithdrawAccount @relation(fields: [accountId], references: [accountId])
}

model Merchant {
  merchantId            Int      @id @default(autoincrement()) @map("merchant_id")
  merchantName          String   @map("merchant_name") @default("")
  merchantCode          String   @map("merchant_code") @default("")
  contactName           String   @map("contact_name") @default("")
  contactPhone          String   @map("contact_phone") @default("")
  contactEmail          String   @map("contact_email") @default("")
  businessLicense       String?  @map("business_license")
  idCardFront           String?  @map("id_card_front")
  idCardBack            String?  @map("id_card_back")
  address               String   @map("address") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchantAccounts      MerchantAccount[]
  merchantApplies       MerchantApply[]
  merchantUsers         MerchantUser[]
  shops                 Shop[]
}

// MerchantAccount (商户账户表)
model MerchantAccount {
  accountId             Int      @id @default(autoincrement()) @map("account_id")
  merchantId            Int      @map("merchant_id")
  balance               Decimal  @map("balance") @db.Decimal(10, 2) @default(0.00)
  frozenBalance         Decimal  @map("frozen_balance") @db.Decimal(10, 2) @default(0.00)
  totalIncome           Decimal  @map("total_income") @db.Decimal(10, 2) @default(0.00)
  totalExpenditure      Decimal  @map("total_expenditure") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// MerchantApply (商户申请表)
model MerchantApply {
  applyId               Int      @id @default(autoincrement()) @map("apply_id")
  merchantId            Int      @map("merchant_id")
  applyType             Int      @map("apply_type") @default(0)
  applyData            String?  @map("apply_data") // JSON
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// MerchantUser (商户用户表)
model MerchantUser {
  userId                Int      @id @default(autoincrement()) @map("user_id")
  merchantId            Int      @map("merchant_id")
  username              String   @map("username") @default("")
  password              String   @map("password") @default("")
  mobile                String   @map("mobile") @default("")
  email                 String   @map("email") @default("")
  status                Int      @map("status") @default(1)
  roleId                Int      @map("role_id") @default(0)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  merchant              Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

// VendorAccount (供应商账户表)
model VendorAccount {
  accountId             Int      @id @default(autoincrement()) @map("account_id")
  vendorId              Int      @map("vendor_id")
  balance               Decimal  @map("balance") @db.Decimal(10, 2) @default(0.00)
  frozenBalance         Decimal  @map("frozen_balance") @db.Decimal(10, 2) @default(0.00)
  totalIncome           Decimal  @map("total_income") @db.Decimal(10, 2) @default(0.00)
  totalExpenditure      Decimal  @map("total_expenditure") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  vendorAccountLogs     VendorAccountLog[]
}

// VendorAccountLog (供应商账户日志表)
model VendorAccountLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorId              Int      @map("vendor_id")
  accountId             Int      @map("account_id")
  amount                Decimal  @map("amount") @db.Decimal(10, 2) @default(0.00)
  beforeBalance         Decimal  @map("before_balance") @db.Decimal(10, 2) @default(0.00)
  afterBalance          Decimal  @map("after_balance") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())
  relatedId             Int      @map("related_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor          @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  vendorAccount         VendorAccount    @relation(fields: [accountId], references: [accountId])
}

// VendorProduct (供应商商品表)
model VendorProduct {
  vendorProductId       Int      @id @default(autoincrement()) @map("vendor_product_id")
  vendorId              Int      @map("vendor_id")
  productId             Int      @map("product_id")
  vendorProductIdRef     Int      @map("vendor_product_id_ref") @default(0)
  productName           String   @map("product_name") @default("")
  productSn             String   @map("product_sn") @default("")
  productPrice          Decimal  @map("product_price") @db.Decimal(10, 2) @default(0.00)
  productStock          Int      @map("product_stock") @default(0)
  status                Int      @map("status") @default(0)
  checkStatus           Int      @map("check_status") @default(0)
  checkReason           String   @map("check_reason") @default("")
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor    @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  product               Product   @relation(fields: [productId], references: [productId])
  vendorProductSkus      VendorProductSku[]
  vendorProductGalleries VendorProductGallery[]
  vendorProductVideos    VendorProductVideo[]
  vendorProductAuditLogs VendorProductAuditLog[]
}

// VendorProductAuditLog (供应商商品审核日志表)
model VendorProductAuditLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorProductId       Int      @map("vendor_product_id")
  adminId               Int      @map("admin_id") @default(0)
  action                String   @map("action") @default("")
  actionDesc            String   @map("action_desc") @default("")
  beforeStatus          Int      @map("before_status") @default(0)
  afterStatus           Int      @map("after_status") @default(0)
  remark                String   @map("remark") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  adminUser             AdminUser?    @relation(fields: [adminId], references: [adminId])
}

// VendorProductGallery (供应商商品图片表)
model VendorProductGallery {
  galleryId             Int      @id @default(autoincrement()) @map("gallery_id")
  vendorProductId       Int      @map("vendor_product_id")
  picUrl                String   @map("pic_url") @default("")
  picDesc               String   @map("pic_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
}

// VendorProductSku (供应商商品SKU表)
model VendorProductSku {
  skuId                 Int      @id @default(autoincrement()) @map("sku_id")
  vendorProductId       Int      @map("vendor_product_id")
  skuValue              String   @map("sku_value") @default("")
  skuSn                 String   @map("sku_sn") @default("")
  skuStock              Int      @map("sku_stock") @default(0)
  skuPrice              Decimal  @map("sku_price") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  vendorProductSkuAttrs VendorProductSkuAttr[]
  vendorProductSkuStockLogs VendorProductSkuStockLog[]
}

// VendorProductSkuAttr (供应商SKU属性表)
model VendorProductSkuAttr {
  attrId                Int      @id @default(autoincrement()) @map("attr_id")
  skuId                 Int      @map("sku_id")
  attrName              String   @map("attr_name") @default("")
  attrValue             String   @map("attr_value") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProductSku       VendorProductSku @relation(fields: [skuId], references: [skuId], onDelete: Cascade)
}

// VendorProductSkuStockLog (供应商SKU库存日志表)
model VendorProductSkuStockLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  vendorProductId       Int      @map("vendor_product_id")
  skuId                 Int      @map("sku_id")
  stockChange           Int      @map("stock_change") @default(0)
  beforeStock           Int      @map("before_stock") @default(0)
  afterStock            Int      @map("after_stock") @default(0)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
  vendorProductSku      VendorProductSku @relation(fields: [skuId], references: [skuId], onDelete: Cascade)
}

// VendorProductVideo (供应商商品视频表)
model VendorProductVideo {
  videoId               Int      @id @default(autoincrement()) @map("video_id")
  vendorProductId       Int      @map("vendor_product_id")
  videoUrl              String   @map("video_url") @default("")
  videoCover            String   @map("video_cover") @default("")
  videoTitle            String   @map("video_title") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorProduct         VendorProduct @relation(fields: [vendorProductId], references: [vendorProductId], onDelete: Cascade)
}

// VendorSettlementOrder (供应商结算订单表)
model VendorSettlementOrder {
  settlementId          Int      @id @default(autoincrement()) @map("settlement_id")
  vendorId              Int      @map("vendor_id")
  orderId               Int      @map("order_id")
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  settlementAmount     Decimal  @map("settlement_amount") @db.Decimal(10, 2) @default(0.00)
  status                Int      @map("status") @default(0)
  settlementTime       DateTime? @map("settlement_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  order                 Order  @relation(fields: [orderId], references: [orderId])
}

// VendorShopBind (供应商店铺绑定表)
model VendorShopBind {
  bindId                Int      @id @default(autoincrement()) @map("bind_id")
  vendorId              Int      @map("vendor_id")
  shopId                Int      @map("shop_id")
  bindTime              DateTime @map("bind_time") @default(now())
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  shop                  Shop   @relation(fields: [shopId], references: [shopId])
}

// VendorWithdraw (供应商提现表)
model VendorWithdraw {
  withdrawId            Int      @id @default(autoincrement()) @map("withdraw_id")
  vendorId              Int      @map("vendor_id")
  withdrawAmount        Decimal  @map("withdraw_amount") @db.Decimal(10, 2) @default(0.00)
  fee                   Decimal  @map("fee") @db.Decimal(10, 2) @default(0.00)
  actualAmount          Decimal  @map("actual_amount") @db.Decimal(10, 2) @default(0.00)
  bankName              String   @map("bank_name") @default("")
  bankAccount           String   @map("bank_account") @default("")
  accountName           String   @map("account_name") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendor                Vendor @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
}

// Salesman (销售员表)
model Salesman {
  salesmanId            Int      @id @default(autoincrement()) @map("salesman_id")
  userId                Int      @map("user_id")
  salesmanName          String   @map("salesman_name") @default("")
  mobile                String   @map("mobile") @default("")
  email                 String   @map("email") @default("")
  avatar                String   @map("avatar") @default("")
  status                Int      @map("status") @default(1)
  parentId              Int      @map("parent_id") @default(0)
  level                 Int      @map("level") @default(1)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  totalCommission       Decimal  @map("total_commission") @db.Decimal(10, 2) @default(0.00)
  availableCommission   Decimal  @map("available_commission") @db.Decimal(10, 2) @default(0.00)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parentSalesman        Salesman?      @relation("SalesmanHierarchy", fields: [parentId], references: [salesmanId])
  childSalesmen         Salesman[]     @relation("SalesmanHierarchy")
  salesmanCustomers     SalesmanCustomer[]
  salesmanOrders        SalesmanOrder[]
}

// SalesmanConfig (销售员配置表)
model SalesmanConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// SalesmanContent (销售员内容表)
model SalesmanContent {
  contentId             Int      @id @default(autoincrement()) @map("content_id")
  salesmanId            Int      @map("salesman_id")
  contentType           Int      @map("content_type") @default(0)
  title                 String   @map("title") @default("")
  content               String   @map("content") @default("")
  image                 String?  @map("image")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// SalesmanCustomer (销售员客户表)
model SalesmanCustomer {
  customerId            Int      @id @default(autoincrement()) @map("customer_id")
  salesmanId            Int      @map("salesman_id")
  userId                Int      @map("user_id")
  bindTime              DateTime @map("bind_time") @default(now())
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// SalesmanGroup (销售员分组表)
model SalesmanGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  groupName             String   @map("group_name") @default("")
  groupDesc             String   @map("group_desc") @default("")
  salesmanId            Int      @map("salesman_id")
  status                Int      @map("status") @default(1)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// SalesmanMaterial (销售员素材表)
model SalesmanMaterial {
  materialId            Int      @id @default(autoincrement()) @map("material_id")
  salesmanId            Int      @map("salesman_id")
  categoryId            Int      @map("category_id") @default(0)
  materialName          String   @map("material_name") @default("")
  materialType          Int      @map("material_type") @default(0)
  materialUrl           String   @map("material_url") @default("")
  materialCover         String   @map("material_cover") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman            @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  category              SalesmanMaterialCategory? @relation(fields: [categoryId], references: [categoryId])
}

// SalesmanMaterialCategory (销售员素材分类表)
model SalesmanMaterialCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  categoryName          String   @map("category_name") @default("")
  categoryDesc          String   @map("category_desc") @default("")
  salesmanId            Int      @map("salesman_id")
  sortOrder             Int      @map("sort_order") @default(100)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman         @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  salesmanMaterials     SalesmanMaterial[]
}

// SalesmanOrder (销售员订单表)
model SalesmanOrder {
  orderId               Int      @id @default(autoincrement()) @map("order_id")
  salesmanId            Int      @map("salesman_id")
  userId                Int      @map("user_id")
  orderSn               String   @map("order_sn") @default("")
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  status                Int      @map("status") @default(0)
  orderTime             DateTime @map("order_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// SalesmanProduct (销售员商品表)
model SalesmanProduct {
  productId             Int      @id @default(autoincrement()) @map("product_id")
  salesmanId            Int      @map("salesman_id")
  productIdRef          Int      @map("product_id_ref")
  status                Int      @map("status") @default(1)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  salesman              Salesman @relation(fields: [salesmanId], references: [salesmanId], onDelete: Cascade)
}

// ShopAccountLog (店铺账户日志表)
model ShopAccountLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  shopId                Int      @map("shop_id")
  amount                Decimal  @map("amount") @db.Decimal(10, 2) @default(0.00)
  beforeBalance         Decimal  @map("before_balance") @db.Decimal(10, 2) @default(0.00)
  afterBalance          Decimal  @map("after_balance") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())
  relatedId             Int      @map("related_id") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
}

// ShopProductCategory (店铺商品分类表)
model ShopProductCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  shopId                Int      @map("shop_id")
  categoryName          String   @map("category_name") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop                  @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  parentCategory        ShopProductCategory?  @relation("ShopCategoryHierarchy", fields: [parentId], references: [categoryId])
  childCategories       ShopProductCategory[] @relation("ShopCategoryHierarchy")
}

// ShopWithdraw (店铺提现表)
model ShopWithdraw {
  withdrawId            Int      @id @default(autoincrement()) @map("withdraw_id")
  shopId                Int      @map("shop_id")
  withdrawAmount        Decimal  @map("withdraw_amount") @db.Decimal(10, 2) @default(0.00)
  fee                   Decimal  @map("fee") @db.Decimal(10, 2) @default(0.00)
  actualAmount          Decimal  @map("actual_amount") @db.Decimal(10, 2) @default(0.00)
  bankName              String   @map("bank_name") @default("")
  bankAccount           String   @map("bank_account") @default("")
  accountName           String   @map("account_name") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shop                  Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
}

model ArticleCategory {
  categoryId            Int      @id @default(autoincrement()) @map("category_id")
  categoryName          String   @map("category_name") @default("")
  categoryDesc          String   @map("category_desc") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  parentCategory        ArticleCategory?  @relation("ArticleCategoryHierarchy", fields: [parentId], references: [categoryId])
  childCategories       ArticleCategory[] @relation("ArticleCategoryHierarchy")
  articles              Article[]
}

// Gallery (相册表)
model Gallery {
  galleryId             Int      @id @default(autoincrement()) @map("gallery_id")
  galleryName           String   @map("gallery_name") @default("")
  galleryDesc           String   @map("gallery_desc") @default("")
  galleryType           Int      @map("gallery_type") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  galleryPics           GalleryPic[]
  galleryVideos         GalleryVideo[]
}

// GalleryPic (相册图片表)
model GalleryPic {
  picId                 Int      @id @default(autoincrement()) @map("pic_id")
  galleryId             Int      @map("gallery_id")
  picUrl                String   @map("pic_url") @default("")
  picTitle              String   @map("pic_title") @default("")
  picDesc               String   @map("pic_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  gallery               Gallery @relation(fields: [galleryId], references: [galleryId], onDelete: Cascade)
}

// GalleryVideo (相册视频表)
model GalleryVideo {
  videoId               Int      @id @default(autoincrement()) @map("video_id")
  galleryId             Int      @map("gallery_id")
  videoUrl              String   @map("video_url") @default("")
  videoTitle            String   @map("video_title") @default("")
  videoDesc             String   @map("video_desc") @default("")
  videoCover            String   @map("video_cover") @default("")
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  gallery               Gallery         @relation(fields: [galleryId], references: [galleryId], onDelete: Cascade)
  galleryVideoInfo      GalleryVideoInfo[]
}

// GalleryVideoInfo (视频信息表)
model GalleryVideoInfo {
  infoId                Int      @id @default(autoincrement()) @map("info_id")
  videoId               Int      @map("video_id")
  duration              Int      @map("duration") @default(0)
  size                  Int      @map("size") @default(0)
  format                String   @map("format") @default("")
  resolution            String   @map("resolution") @default("")
  bitrate               Int      @map("bitrate") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  galleryVideo          GalleryVideo @relation(fields: [videoId], references: [videoId], onDelete: Cascade)
}

// Feedback (用户反馈表)
model Feedback {
  feedbackId            Int      @id @default(autoincrement()) @map("feedback_id")
  userId                Int      @map("user_id")
  feedbackType          Int      @map("feedback_type") @default(0)
  title                 String   @map("title") @default("")
  content               String   @map("content") @default("")
  contact               String   @map("contact") @default("")
  images                String?  @map("images") // JSON
  status                Int      @map("status") @default(0)
  replyContent          String   @map("reply_content") @default("")
  replyTime             DateTime? @map("reply_time")
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User? @relation(fields: [userId], references: [userId])
}

// Keywords (关键词表)
model Keywords {
  keywordId             Int      @id @default(autoincrement()) @map("keyword_id")
  keyword               String   @unique @map("keyword") @default("")
  searchCount           Int      @map("search_count") @default(0)
  clickCount            Int      @map("click_count") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// FriendLinks (友情链接表)
model FriendLinks {
  linkId                Int      @id @default(autoincrement()) @map("link_id")
  linkName              String   @map("link_name") @default("")
  linkUrl               String   @map("link_url") @default("")
  linkImage             String   @map("link_image") @default("")
  linkDesc              String   @map("link_desc") @default("")
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// StatisticsBase (基础统计表)
model StatisticsBase {
  statId                Int      @id @default(autoincrement()) @map("stat_id")
  statType              Int      @map("stat_type") @default(0)
  statDate              DateTime @map("stat_date") @default(now())
  totalCount            Int      @map("total_count") @default(0)
  totalAmount           Decimal  @map("total_amount") @db.Decimal(10, 2) @default(0.00)
  extraData             String?  @map("extra_data") // JSON

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// StatisticsLog (统计日志表)
model StatisticsLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  statType              Int      @map("stat_type") @default(0)
  action                String   @map("action") @default("")
  data                  String?  @map("data") // JSON
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// RankGrowthLog (等级增长日志表)
model RankGrowthLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  rankId                Int      @map("rank_id")
  growthPoints          Int      @map("growth_points") @default(0)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  userRank              UserRank @relation(fields: [rankId], references: [rankId], onDelete: Cascade)
}

// Album (相册表 - UI装修)
model Album {
  albumId               Int      @id @default(autoincrement()) @map("album_id")
  albumName             String   @map("album_name") @default("")
  albumDesc             String   @map("album_desc") @default("")
  albumType             Int      @map("album_type") @default(0)
  cover                 String   @map("cover") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// AppVersion (App版本表)
model AppVersion {
  versionId             Int      @id @default(autoincrement()) @map("version_id")
  versionCode           String   @map("version_code") @default("")
  versionName           String   @map("version_name") @default("")
  platform              String   @map("platform") @default("")
  downloadUrl           String   @map("download_url") @default("")
  changeLog             String   @map("change_log") @default("")
  isForceUpdate         Int      @map("is_force_update") @default(0)
  status                Int      @map("status") @default(1)
  publishTime           DateTime @map("publish_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Decorate (装修表)
model Decorate {
  decorateId            Int      @id @default(autoincrement()) @map("decorate_id")
  decorateName          String   @map("decorate_name") @default("")
  decorateType          Int      @map("decorate_type") @default(0)
  pageType              Int      @map("page_type") @default(0)
  data                  String   @map("data") // JSON
  status                Int      @map("status") @default(1)
  isDefault             Int      @map("is_default") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// DecorateDiscrete (离散装修表)
model DecorateDiscrete {
  discreteId            Int      @id @default(autoincrement()) @map("discrete_id")
  decorateId            Int      @map("decorate_id")
  componentName         String   @map("component_name") @default("")
  componentData         String   @map("component_data") // JSON
  position              Int      @map("position") @default(0)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  decorate              Decorate @relation(fields: [decorateId], references: [decorateId], onDelete: Cascade)
}

// DecorateShare (装修分享表)
model DecorateShare {
  shareId               Int      @id @default(autoincrement()) @map("share_id")
  decorateId            Int      @map("decorate_id")
  shareCode             String   @unique @map("share_code") @default("")
  shareUrl              String   @map("share_url") @default("")
  shareCount            Int      @map("share_count") @default(0)
  viewCount             Int      @map("view_count") @default(0)
  status                Int      @map("status") @default(1)
  createTime            DateTime @map("create_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  decorate              Decorate @relation(fields: [decorateId], references: [decorateId], onDelete: Cascade)
}

// MobileCatNav (移动端分类导航表)
model MobileCatNav {
  navId                 Int      @id @default(autoincrement()) @map("nav_id")
  categoryId            Int      @map("category_id")
  navName               String   @map("nav_name") @default("")
  navImage              String   @map("nav_image") @default("")
  navLink               String   @map("nav_link") @default("")
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  category              Category @relation(fields: [categoryId], references: [categoryId])
}

// PcCatFloor (PC端分类楼层表)
model PcCatFloor {
  floorId               Int      @id @default(autoincrement()) @map("floor_id")
  categoryId            Int      @map("category_id")
  floorName             String   @map("floor_name") @default("")
  floorImage            String   @map("floor_image") @default("")
  floorDesc             String   @map("floor_desc") @default("")
  products              String?  @map("products") // JSON
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  category              Category @relation(fields: [categoryId], references: [categoryId])
}

// PcNavigation (PC端导航表)
model PcNavigation {
  navId                 Int      @id @default(autoincrement()) @map("nav_id")
  navName               String   @map("nav_name") @default("")
  navLink               String   @map("nav_link") @default("")
  parentId              Int      @map("parent_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)
  isShow                Int      @map("is_show") @default(1)
  navType               Int      @map("nav_type") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  parentNav             PcNavigation? @relation("PcNavigationHierarchy", fields: [parentId], references: [navId])
  childNavs             PcNavigation[] @relation("PcNavigationHierarchy")
}

// ECard (电子卡表)
model ECard {
  cardId                Int      @id @default(autoincrement()) @map("card_id")
  cardName              String   @map("card_name") @default("")
  cardDesc              String   @map("card_desc") @default("")
  cardImage             String   @map("card_image") @default("")
  cardPrice             Decimal  @map("card_price") @db.Decimal(10, 2) @default(0.00)
  cardValue             Decimal  @map("card_value") @db.Decimal(10, 2) @default(0.00)
  validityDays         Int      @map("validity_days") @default(0)
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ECardGroup (电子卡分组表)
model ECardGroup {
  groupId               Int      @id @default(autoincrement()) @map("group_id")
  groupName             String   @map("group_name") @default("")
  groupDesc             String   @map("group_desc") @default("")
  groupImage            String   @map("group_image") @default("")
  status                Int      @map("status") @default(1)
  isShow                Int      @map("is_show") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// PriceInquiry (价格咨询表)
model PriceInquiry {
  inquiryId             Int      @id @default(autoincrement()) @map("inquiry_id")
  productId             Int      @map("product_id")
  userId                Int      @map("user_id")
  userName              String   @map("user_name") @default("")
  userMobile            String   @map("user_mobile") @default("")
  userEmail             String   @map("user_email") @default("")
  inquiryContent        String   @map("inquiry_content") @default("")
  replyContent          String   @map("reply_content") @default("")
  status                Int      @map("status") @default(0)
  addTime               DateTime @map("add_time") @default(now())
  replyTime             DateTime? @map("reply_time")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  product               Product @relation(fields: [productId], references: [productId])
  user                  User?   @relation(fields: [userId], references: [userId])
}

// WechatLive (微信直播表)
model WechatLive {
  liveId                Int      @id @default(autoincrement()) @map("live_id")
  liveTitle             String   @map("live_title") @default("")
  liveDesc              String   @map("live_desc") @default("")
  liveImage             String   @map("live_image") @default("")
  liveUrl               String   @map("live_url") @default("")
  startTime             DateTime @map("start_time") @default(now())
  endTime               DateTime @map("end_time") @default(now())
  status                Int      @map("status") @default(0)
  viewCount             Int      @map("view_count") @default(0)
  likeCount             Int      @map("like_count") @default(0)
  shareCount            Int      @map("share_count") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// RefundApply (退款申请表)
model RefundApply {
  applyId               Int      @id @default(autoincrement()) @map("apply_id")
  orderId               Int      @map("order_id")
  orderItemId           Int      @map("order_item_id")
  userId                Int      @map("user_id")
  refundType            Int      @map("refund_type") @default(0)
  refundAmount          Decimal  @map("refund_amount") @db.Decimal(10, 2) @default(0.00)
  refundReason          String   @map("refund_reason") @default("")
  refundDesc            String   @map("refund_desc") @default("")
  refundProof           String?  @map("refund_proof") // JSON
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  order                 Order     @relation(fields: [orderId], references: [orderId])
  orderItem             OrderItem @relation(fields: [orderItemId], references: [itemId])
  user                  User      @relation(fields: [userId], references: [userId])
  refundLogs            RefundLog[]
}

// RefundLog (退款日志表)
model RefundLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  applyId               Int      @map("apply_id")
  adminId               Int      @map("admin_id") @default(0)
  action                String   @map("action") @default("")
  actionDesc            String   @map("action_desc") @default("")
  beforeStatus          Int      @map("before_status") @default(0)
  afterStatus           Int      @map("after_status") @default(0)
  remark                String   @map("remark") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  refundApply           RefundApply @relation(fields: [applyId], references: [applyId], onDelete: Cascade)
  adminUser             AdminUser?  @relation(fields: [adminId], references: [adminId])
}

// RechargeSetting (充值设置表)
model RechargeSetting {
  settingId             Int      @id @default(autoincrement()) @map("setting_id")
  rechargeAmount        Decimal  @map("recharge_amount") @db.Decimal(10, 2) @default(0.00)
  giveAmount           Decimal  @map("give_amount") @db.Decimal(10, 2) @default(0.00)
  givePoints           Int      @map("give_points") @default(0)
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// DistributionLog (分销日志表)
model DistributionLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  userId                Int      @map("user_id")
  fromUserId            Int      @map("from_user_id") @default(0)
  orderId               Int      @map("order_id") @default(0)
  orderAmount           Decimal  @map("order_amount") @db.Decimal(10, 2) @default(0.00)
  commissionRate        Decimal  @map("commission_rate") @db.Decimal(5, 2) @default(0.00)
  commissionAmount      Decimal  @map("commission_amount") @db.Decimal(10, 2) @default(0.00)
  logType               Int      @map("log_type") @default(0)
  logMsg                String   @map("log_msg") @default("")
  logTime               DateTime @map("log_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User     @relation("DistributionLogUser", fields: [userId], references: [userId])
  fromUser              User?    @relation("DistributionLogFromUser", fields: [fromUserId], references: [userId])
  order                 Order?    @relation(fields: [orderId], references: [orderId])
}

// OrderConfig (订单配置表)
model OrderConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// OrderCouponDetail (订单优惠券明细表)
model OrderCouponDetail {
  detailId              Int      @id @default(autoincrement()) @map("detail_id")
  orderId               Int      @map("order_id")
  couponId              Int      @map("coupon_id")
  userCouponId          Int      @map("user_coupon_id")
  couponAmount          Decimal  @map("coupon_amount") @db.Decimal(10, 2) @default(0.00)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  order                 Order       @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  coupon                Coupon      @relation(fields: [couponId], references: [couponId])
  userCoupon            UserCoupon  @relation(fields: [userCouponId], references: [id])
}

model Config {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @unique @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")
  groupId               Int      @map("group_id") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Crons (定时任务表)
model Crons {
  cronId                Int      @id @default(autoincrement()) @map("cron_id")
  cronName              String   @map("cron_name") @default("")
  cronExpression        String   @map("cron_expression") @default("")
  cronCommand           String   @map("cron_command") @default("")
  cronDesc              String   @map("cron_desc") @default("")
  status                Int      @map("status") @default(1)
  lastRunTime           DateTime? @map("last_run_time")
  nextRunTime           DateTime? @map("next_run_time")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Currency (货币表)
model Currency {
  currencyId            Int      @id @default(autoincrement()) @map("currency_id")
  currencyCode          String   @map("currency_code") @default("")
  currencyName          String   @map("currency_name") @default("")
  currencySymbol        String   @map("currency_symbol") @default("")
  exchangeRate          Decimal  @map("exchange_rate") @db.Decimal(10, 4) @default(1.0000)
  status                Int      @map("status") @default(1)
  isDefault             Int      @map("is_default") @default(0)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// AreaCode (地区代码表)
model AreaCode {
  areaId                Int      @id @default(autoincrement()) @map("area_id")
  countryCode           String   @map("country_code") @default("")
  areaCode              String   @map("area_code") @default("")
  areaName              String   @map("area_name") @default("")
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Print (打印配置表)
model Print {
  printId               Int      @id @default(autoincrement()) @map("print_id")
  printName             String   @map("print_name") @default("")
  printType             Int      @map("print_type") @default(0)
  printContent          String   @map("print_content") @default("")
  printTemplate        String   @map("print_template") @default("")
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// PrintConfig (打印设置表)
model PrintConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// SensitiveWords (敏感词表)
model SensitiveWords {
  wordId                Int      @id @default(autoincrement()) @map("word_id")
  word                  String   @unique @map("word") @default("")
  replaceWord           String   @map("replace_word") @default("***")
  wordType              Int      @map("word_type") @default(0)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Suppliers (供应商表 - 基础信息)
model Suppliers {
  suppliersId           Int      @id @default(autoincrement()) @map("suppliers_id")
  suppliersName        String   @map("suppliers_name") @default("")
  suppliersDesc        String   @map("suppliers_desc") @default("")
  contactName           String   @map("contact_name") @default("")
  contactPhone          String   @map("contact_phone") @default("")
  contactEmail          String   @map("contact_email") @default("")
  address               String   @map("address") @default("")
  status                Int      @map("status") @default(1)
  addTime               DateTime @map("add_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Locales (本地化表)
model Locales {
  localeId              Int      @id @default(autoincrement()) @map("locale_id")
  localeCode            String   @unique @map("locale_code") @default("")
  localeName            String   @map("locale_name") @default("")
  nativeName            String   @map("native_name") @default("")
  status                Int      @map("status") @default(1)
  isDefault             Int      @map("is_default") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  localesLangs          LocalesLang[]
  localesRelations      LocalesRelation[]
}

// LocalesLang (本地化语言表)
model LocalesLang {
  langId                Int      @id @default(autoincrement()) @map("lang_id")
  localeId              Int      @map("locale_id")
  langCode              String   @map("lang_code") @default("")
  langName              String   @map("lang_name") @default("")
  nativeName            String   @map("native_name") @default("")
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  locale                Locales @relation(fields: [localeId], references: [localeId], onDelete: Cascade)
}

// LocalesRelation (本地化关系表)
model LocalesRelation {
  relationId            Int      @id @default(autoincrement()) @map("relation_id")
  localeId              Int      @map("locale_id")
  relatedLocaleId       Int      @map("related_locale_id")
  relationType          Int      @map("relation_type") @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  locale                Locales  @relation("LocalesRelationMain", fields: [localeId], references: [localeId])
  relatedLocale         Locales  @relation("LocalesRelationRelated", fields: [relatedLocaleId], references: [localeId])
}

// Translations (翻译表)
model Translations {
  translationId         Int      @id @default(autoincrement()) @map("translation_id")
  key                   String   @map("key") @default("")
  localeCode            String   @map("locale_code") @default("")
  translation           String   @map("translation") @default("")
  module                String   @map("module") @default("")
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  translationsData      TranslationsData[]
}

// TranslationsData (翻译数据表)
model TranslationsData {
  dataId                Int      @id @default(autoincrement()) @map("data_id")
  translationId         Int      @map("translation_id")
  dataKey               String   @map("data_key") @default("")
  dataValue             String   @map("data_value") @default("")
  dataType              String   @map("data_type") @default("string")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  translation           Translations @relation(fields: [translationId], references: [translationId], onDelete: Cascade)
}

// MessageTemplate (消息模板表)
model MessageTemplate {
  templateId            Int      @id @default(autoincrement()) @map("template_id")
  templateName          String   @map("template_name") @default("")
  templateCode          String   @unique @map("template_code") @default("")
  templateType          Int      @map("template_type") @default(0)
  templateContent       String   @map("template_content") @default("")
  templateParams        String?  @map("template_params") // JSON
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// MessageType (消息类型表)
model MessageType {
  typeId                Int      @id @default(autoincrement()) @map("type_id")
  typeName              String   @map("type_name") @default("")
  typeCode              String   @unique @map("type_code") @default("")
  typeDesc              String   @map("type_desc") @default("")
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// MailTemplates (邮件模板表)
model MailTemplates {
  templateId            Int      @id @default(autoincrement()) @map("template_id")
  templateCode          String   @unique @map("template_code") @default("")
  templateSubject       String   @map("template_subject") @default("")
  templateContent       String   @map("template_content") @default("")
  templateParams        String?  @map("template_params") // JSON
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// MailLog (邮件日志表)
model MailLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  toEmail               String   @map("to_email") @default("")
  subject               String   @map("subject") @default("")
  content               String   @map("content") @default("")
  status                Int      @map("status") @default(0)
  sendTime              DateTime @map("send_time") @default(now())
  errorMessage          String?  @map("error_message")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// SmsLog (短信日志表)
model SmsLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  toPhone               String   @map("to_phone") @default("")
  content               String   @map("content") @default("")
  templateCode          String   @map("template_code") @default("")
  status                Int      @map("status") @default(0)
  sendTime              DateTime @map("send_time") @default(now())
  errorMessage          String?  @map("error_message")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// UnipushLog (推送日志表)
model UnipushLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  userId                Int      @map("user_id")
  title                 String   @map("title") @default("")
  content               String   @map("content") @default("")
  pushType              Int      @map("push_type") @default(0)
  status                Int      @map("status") @default(0)
  pushTime              DateTime @map("push_time") @default(now())
  errorMessage          String?  @map("error_message")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User? @relation(fields: [userId], references: [userId])
}

// ImConfig (即时通讯配置表)
model ImConfig {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// ImConversation (即时通讯会话表)
model ImConversation {
  conversationId        Int      @id @default(autoincrement()) @map("conversation_id")
  userId                Int      @map("user_id")
  targetType            Int      @map("target_type") @default(0)
  targetId              Int      @map("target_id") @default(0)
  lastMessage           String   @map("last_message") @default("")
  lastMessageTime       DateTime @map("last_message_time") @default(now())
  unreadCount           Int      @map("unread_count") @default(0)
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  imMessages            ImMessage[]
}

// ImMessage (即时通讯消息表)
model ImMessage {
  messageId            Int      @id @default(autoincrement()) @map("message_id")
  conversationId        Int      @map("conversation_id")
  fromUserId            Int      @map("from_user_id")
  toUserId              Int      @map("to_user_id")
  messageType           Int      @map("message_type") @default(0)
  content               String   @map("content") @default("")
  status                Int      @map("status") @default(1)
  sendTime              DateTime @map("send_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  conversation          ImConversation @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade)
  fromUser              User           @relation("ImMessageFromUser", fields: [fromUserId], references: [userId])
  toUser                User           @relation("ImMessageToUser", fields: [toUserId], references: [userId])
}

// ImServant (即时通讯客服表)
model ImServant {
  servantId             Int      @id @default(autoincrement()) @map("servant_id")
  servantName           String   @map("servant_name") @default("")
  servantAvatar         String   @map("servant_avatar") @default("")
  servantType           Int      @map("servant_type") @default(0)
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// LogisticsApiLog (物流API日志表)
model LogisticsApiLog {
  logId                 Int      @id @default(autoincrement()) @map("log_id")
  companyId             Int      @map("company_id")
  apiType               Int      @map("api_type") @default(0)
  trackingNo            String   @map("tracking_no") @default("")
  requestParams         String?  @map("request_params") // JSON
  responseData          String?  @map("response_data") // JSON
  status                Int      @map("status") @default(0)
  requestTime           DateTime @map("request_time") @default(now())
  responseTime          DateTime? @map("response_time")
  errorMessage          String?  @map("error_message")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  logisticsCompany      LogisticsCompany @relation(fields: [companyId], references: [companyId])
}

// ShippingType (配送方式表)
model ShippingType {
  typeId                Int      @id @default(autoincrement()) @map("type_id")
  typeName              String   @map("type_name") @default("")
  typeCode              String   @unique @map("type_code") @default("")
  typeDesc              String   @map("type_desc") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Statement (对账单表)
model Statement {
  statementId           Int      @id @default(autoincrement()) @map("statement_id")
  statementNo           String   @unique @map("statement_no") @default("")
  statementType         Int      @map("statement_type") @default(0)
  targetType            Int      @map("target_type") @default(0)
  targetId              Int      @map("target_id") @default(0)
  startDate             DateTime @map("start_date") @default(now())
  endDate               DateTime @map("end_date") @default(now())
  totalAmount           Decimal  @map("total_amount") @db.Decimal(10, 2) @default(0.00)
  settledAmount         Decimal  @map("settled_amount") @db.Decimal(10, 2) @default(0.00)
  status                Int      @map("status") @default(0)
  statementTime         DateTime @map("statement_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  statementDownloads    StatementDownload[]
  statementOutputs      StatementOutput[]
}

// StatementDownload (对账单下载表)
model StatementDownload {
  downloadId            Int      @id @default(autoincrement()) @map("download_id")
  statementId           Int      @map("statement_id")
  downloadUrl           String   @map("download_url") @default("")
  downloadTime           DateTime @map("download_time") @default(now())
  downloadIp            String   @map("download_ip") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  statement             Statement @relation(fields: [statementId], references: [statementId], onDelete: Cascade)
}

// StatementOutput (对账单输出表)
model StatementOutput {
  outputId              Int      @id @default(autoincrement()) @map("output_id")
  statementId           Int      @map("statement_id")
  outputType            Int      @map("output_type") @default(0)
  outputFile            String   @map("output_file") @default("")
  outputTime            DateTime @map("output_time") @default(now())

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  statement             Statement @relation(fields: [statementId], references: [statementId], onDelete: Cascade)
}

// Example (示例数据表)
model Example {
  exampleId             Int      @id @default(autoincrement()) @map("example_id")
  exampleName           String   @map("example_name") @default("")
  exampleDesc           String   @map("example_desc") @default("")
  exampleData           String?  @map("example_data") // JSON
  status                Int      @map("status") @default(1)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Config_2_2_6 (2.2.6版本配置表)
model Config_2_2_6 {
  configId              Int      @id @default(autoincrement()) @map("config_id")
  key                   String   @map("key") @default("")
  value                 String   @map("value") @default("")
  description           String   @map("description") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Paylog (支付日志表)
model Paylog {
  paylogId              Int      @id @default(autoincrement()) @map("paylog_id")
  paySn                 String   @unique @map("pay_sn") @default("")
  payName               String   @map("pay_name") @default("")
  payAmount             Decimal  @map("pay_amount") @db.Decimal(10, 2) @default(0.00)
  payStatus             Int      @map("pay_status") @default(0)
  payCode               String   @map("pay_code") @default("")
  addTime               DateTime @map("add_time") @default(now())
  transactionId         String   @map("transaction_id") @default("")
  notifyData            String   @map("notify_data") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// PaylogRefund (支付退款日志表)
model PaylogRefund {
  refundId              Int      @id @default(autoincrement()) @map("refund_id")
  paylogId              Int      @map("paylog_id")
  refundAmount          Decimal  @map("refund_amount") @db.Decimal(10, 2) @default(0.00)
  refundStatus          Int      @map("refund_status") @default(0)
  refundTime            DateTime? @map("refund_time")
  transactionId         String   @map("transaction_id") @default("")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  paylog                Paylog @relation(fields: [paylogId], references: [paylogId], onDelete: Cascade)
}

model Vendor {
  vendorId              Int      @id @default(autoincrement()) @map("vendor_id")
  vendorName            String   @map("vendor_name") @default("")
  vendorCode            String   @map("vendor_code") @default("")
  contactName           String   @map("contact_name") @default("")
  contactPhone          String   @map("contact_phone") @default("")
  contactEmail          String   @map("contact_email") @default("")
  businessLicense       String?  @map("business_license")
  address               String   @map("address") @default("")
  status                Int      @map("status") @default(0)
  applyTime             DateTime @map("apply_time") @default(now())
  approveTime           DateTime? @map("approve_time")
  remark                String   @map("remark") @default("")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  vendorAccounts        VendorAccount[]
  vendorAccountLogs     VendorAccountLog[]
  vendorProducts        VendorProduct[]
  vendorProductAuditLogs VendorProductAuditLog[]
  vendorProductGalleries VendorProductGallery[]
  vendorProductSkus     VendorProductSku[]
  vendorProductSkuAttrs VendorProductSkuAttr[]
  vendorProductSkuStockLogs VendorProductSkuStockLog[]
  vendorProductVideos   VendorProductVideo[]
  vendorSettlementOrders VendorSettlementOrder[]
  vendorShopBinds       VendorShopBind[]
  vendorWithdraws       VendorWithdraw[]
}

// UserRank (用户等级表)
model UserRank {
  rankId                Int      @id @default(autoincrement()) @map("rank_id")
  rankName              String   @map("rank_name") @default("")
  rankLevel             Int      @map("rank_level") @default(0)
  minPoints             Int      @map("min_points") @default(0)
  maxPoints             Int      @map("max_points") @default(0)
  discount              Int      @map("discount") @default(100)
  status                Int      @map("status") @default(1)
  description           String   @map("description") @default("")
  icon                  String?  @map("icon")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  users                 User[]
}

// LogisticsCompany (物流公司表)
model LogisticsCompany {
  companyId             Int      @id @default(autoincrement()) @map("company_id")
  companyName           String   @map("company_name") @default("")
  companyCode           String   @map("company_code") @default("")
  contactName           String   @map("contact_name") @default("")
  contactPhone          String   @map("contact_phone") @default("")
  contactEmail          String   @map("contact_email") @default("")
  website               String?  @map("website")
  address               String   @map("address") @default("")
  status                Int      @map("status") @default(1)
  sortOrder             Int      @map("sort_order") @default(100)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  shippingTypes         ShippingType[]
}

